{
  "input": {
    "board-dag-add_block": 0,
    "board-dag-append_block": 0,
    "board-dag-canvas_debug_accordion": null,
    "board-dag-network_initialized": true,
    "board-dag-network_selected": "",
    "board-dag-remove": 0,
    "board-dag-scoutbar": null,
    "board-dag-scoutbar-configuration": {
      "id": "board-dag-scoutbar",
      "theme": "light",
      "placeholder": "Search for a block",
      "actions": [
        {
          "children": [
            {
              "children": {
                "ariaLabel": "dataset_block",
                "label": "dataset block",
                "description": "Choose a dataset from a package",
                "closeOnClick": true
              },
              "class": "scout_action"
            }
          ],
          "label": "data",
          "class": "scout_section"
        },
        {
          "children": [
            {
              "children": {
                "ariaLabel": "join_block",
                "label": "join block",
                "description": "Join together two data.frames",
                "closeOnClick": true
              },
              "class": "scout_action"
            },
            {
              "children": {
                "ariaLabel": "select_block",
                "label": "select block",
                "description": "Subset columns in a data.frame",
                "closeOnClick": true
              },
              "class": "scout_action"
            },
            {
              "children": {
                "ariaLabel": "subset_block",
                "label": "subset block",
                "description": "Row and column subsetting",
                "closeOnClick": true
              },
              "class": "scout_action"
            }
          ],
          "label": "transform",
          "class": "scout_section"
        }
      ]
    },
    "board-dashboard": false,
    "board-grid_layout": {
      "alwaysShowResizeHandle": false,
      "cellHeight": 140,
      "float": true,
      "disableDrag": false,
      "disableResize": false,
      "removable": true,
      "resizable": {
        "handles": "all"
      },
      "acceptWidgets": true,
      "children": [

      ]
    },
    "board-mode": true,
    "board-properties": false
  },
  "output": {
    "board-dag-network": {
      "x": {
        "nodes": {

        },
        "edges": {

        },
        "nodesToDataframe": true,
        "edgesToDataframe": true,
        "options": {
          "width": "100%",
          "height": "100%",
          "nodes": {
            "shape": "dot"
          },
          "manipulation": {
            "enabled": true,
            "initiallyActive": true,
            "addNode": false,
            "deleteNode": false,
            "deleteEdge": false,
            "editEdge": false
          },
          "interaction": {
            "hover": false,
            "multiselect": true,
            "selectConnectedEdges": false,
            "zoomSpeed": 1
          },
          "edges": {
            "length": 300,
            "smooth": false
          },
          "physics": {
            "solver": "forceAtlas2Based",
            "maxVelocity": 50,
            "minVelocity": 0.1,
            "timestep": 0.5,
            "stabilization": {
              "enabled": true,
              "iterations": 1000,
              "updateInterval": 100,
              "onlyDynamicEdges": false,
              "fit": true
            },
            "adaptiveTimestep": true
          }
        },
        "groups": null,
        "width": "100%",
        "height": "100vh",
        "idselection": {
          "enabled": true,
          "style": "width: 150px; height: 26px",
          "useLabels": true,
          "main": "Select by id"
        },
        "byselection": {
          "enabled": false,
          "style": "width: 150px; height: 26px",
          "multiple": false,
          "hideColor": "rgba(200,200,200,0.5)",
          "highlight": false
        },
        "main": null,
        "submain": null,
        "footer": null,
        "background": "rgba(0, 0, 0, 0)",
        "tooltipStay": 300,
        "tooltipStyle": "position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);",
        "opts_manipulation": {
          "datacss": "table.legend_table {\n  font-size: 11px;\n  border-width:1px;\n  border-color:#d3d3d3;\n  border-style:solid;\n}\ntable.legend_table td {\n  border-width:1px;\n  border-color:#d3d3d3;\n  border-style:solid;\n  padding: 2px;\n}\ndiv.table_content {\n  width:80px;\n  text-align:center;\n}\ndiv.table_description {\n  width:100px;\n}\n\n.operation {\n  font-size:20px;\n}\n\n.network-popUp {\n  display:none;\n  z-index:299;\n  width:250px;\n  /*height:150px;*/\n  background-color: #f9f9f9;\n  border-style:solid;\n  border-width:1px;\n  border-color: #0d0d0d;\n  padding:10px;\n  text-align: center;\n  position:fixed;\n  top:50%;  \n  left:50%;  \n  margin:-100px 0 0 -100px;  \n\n}",
          "addNodeCols": [
            "id",
            "label"
          ],
          "editNodeCols": [
            "id",
            "label"
          ],
          "tab_add_node": "<span id=\"addnode-operation\" class = \"operation\">node<\/span> <br><table style=\"margin:auto;\"><tr><td>id<\/td><td><input id=\"addnode-id\"  type= \"text\" value=\"new value\"><\/td><\/tr><tr><td>label<\/td><td><input id=\"addnode-label\"  type= \"text\" value=\"new value\"><\/td><\/tr><\/table><input type=\"button\" value=\"save\" id=\"addnode-saveButton\"><\/button><input type=\"button\" value=\"cancel\" id=\"addnode-cancelButton\"><\/button>",
          "tab_edit_node": "<span id=\"editnode-operation\" class = \"operation\">node<\/span> <br><table style=\"margin:auto;\"><tr><td>id<\/td><td><input id=\"editnode-id\"  type= \"text\" value=\"new value\"><\/td><\/tr><tr><td>label<\/td><td><input id=\"editnode-label\"  type= \"text\" value=\"new value\"><\/td><\/tr><\/table><input type=\"button\" value=\"save\" id=\"editnode-saveButton\"><\/button><input type=\"button\" value=\"cancel\" id=\"editnode-cancelButton\"><\/button>"
        },
        "highlight": {
          "enabled": false,
          "hoverNearest": false,
          "degree": 1,
          "algorithm": "all",
          "hideColor": "rgba(200,200,200,0.5)",
          "labelOnly": true
        },
        "collapse": {
          "enabled": true,
          "fit": false,
          "resetHighlight": true,
          "clusterOptions": null,
          "keepCoord": true,
          "labelSuffix": "(cluster)"
        },
        "events": {
          "oncontext": "function(e) {\n              e.event.preventDefault(); // avoid showing web inspector ...\n              Shiny.setInputValue('board-dag-node_right_clicked', e.nodes, {priority: 'event'});\n            }",
          "select": "function(e) {\n              if (e.nodes.length > 1) {\n                Shiny.setInputValue('board-dag-selected_nodes', e.nodes, {priority: 'event'});\n              }\n            }",
          "selectEdge": "function(e) {\n              Shiny.setInputValue('board-dag-selected_edge', e.edges[0], {priority: 'event'});\n            }",
          "controlNodeDragEnd": "function(e) {\n              Shiny.setInputValue('board-dag-new_edge', e.controlEdge, {priority: 'event'});\n              let target = $(`.${e.event.target.offsetParent.className}`)\n                .closest('.visNetwork')\n                .attr('id');\n              // Re-enable add edge mode\n              setTimeout(() => {\n                window.HTMLWidgets.find(`#${target}`).network.addEdgeMode();\n              }, 500);\n            ;}"
        },
        "OnceEvents": {
          "stabilized": "function() {\n              var network = this;\n              \n              network.on('afterDrawing', function(ctx) {\n                var edges = network.body.edges;\n                var nodes = network.body.nodes;\n                \n                Object.keys(edges).forEach(function(edgeId) {\n                  var edge = edges[edgeId];\n                  var fromNode = nodes[edge.fromId];\n                  var toNode = nodes[edge.toId];\n                  \n                  // Calculate intersection points\n                  if (fromNode && toNode) {\n                    // Get positions\n                    var fromX = fromNode.x;\n                    var fromY = fromNode.y;\n                    var toX = toNode.x;\n                    var toY = toNode.y;\n                    \n                    // Calculate angles and distances\n                    var angle = Math.atan2(toY - fromY, toX - fromX);\n                    var reverseAngle = Math.atan2(fromY - toY, fromX - toX);\n                    \n                    // Get node radii (using shape.width since shape.radius might not be available)\n                    var fromRadius = fromNode.shape.width / 2;\n                    var toRadius = toNode.shape.width / 2;\n                    \n                    // Calculate intersection points\n                    var fromIntersectX = fromX + (Math.cos(angle) * fromRadius);\n                    var fromIntersectY = fromY + (Math.sin(angle) * fromRadius);\n                    var toIntersectX = toX + (Math.cos(reverseAngle) * toRadius);\n                    var toIntersectY = toY + (Math.sin(reverseAngle) * toRadius);\n                    \n                    // Draw connection points at intersection\n                    ctx.beginPath();\n                    ctx.arc(fromIntersectX, fromIntersectY, 4, 0, 2 * Math.PI);\n                    ctx.fillStyle = '#2B7CE9';\n                    ctx.fill();\n                    ctx.strokeStyle = 'white';\n                    ctx.lineWidth = 1;\n                    ctx.stroke();\n                    \n                    ctx.beginPath();\n                    ctx.arc(toIntersectX, toIntersectY, 4, 0, 2 * Math.PI);\n                    ctx.fillStyle = '#2B7CE9';\n                    ctx.fill();\n                    ctx.strokeStyle = 'white';\n                    ctx.lineWidth = 1;\n                    ctx.stroke();\n                  }\n                });\n              });\n            }"
        }
      },
      "evals": [
        "events.oncontext",
        "events.select",
        "events.selectEdge",
        "events.controlNodeDragEnd",
        "OnceEvents.stabilized"
      ],
      "jsHooks": [

      ],
      "deps": [

      ]
    },
    "board-grid": {
      "x": {
        "html": "",
        "options": {
          "alwaysShowResizeHandle": false,
          "animate": true,
          "cellHeight": "140px",
          "column": 12,
          "float": true,
          "disableDrag": false,
          "disableResize": false,
          "margin": "10px",
          "maxRow": 0,
          "minRow": 0,
          "removable": true,
          "resizable": {
            "handles": "all"
          },
          "acceptWidgets": true
        },
        "bg": "#e5e7eb"
      },
      "evals": [

      ],
      "jsHooks": [

      ],
      "deps": [

      ]
    }
  },
  "export": {
    "board-blocks": [

    ],
    "board-network_out": {
      "edges": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$edges",
        "}), class = \"function\")"
      ],
      "nodes": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$nodes",
        "}), class = \"function\")"
      ],
      "selected_node": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    input$network_selected",
        "}), class = \"function\")"
      ],
      "added_node": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$new_block",
        "}), class = \"function\")"
      ],
      "removed_node": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    hybrid_chain(eventFunc(), function(value) {",
        "        if (ignoreInit && !initialized) {",
        "            initialized <<- TRUE",
        "            req(FALSE)",
        "        }",
        "        req(!ignoreNULL || !isNullEvent(value))",
        "        isolate(valueFunc())",
        "    })",
        "}), class = \"function\")"
      ],
      "added_edge": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$added_edge",
        "}), class = \"function\")"
      ],
      "removed_edge": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$removed_edge",
        "}), class = \"function\")"
      ]
    }
  }
}
