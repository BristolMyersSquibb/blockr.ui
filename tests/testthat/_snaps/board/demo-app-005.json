{
  "input": {
    "board-board_tabs": "network_tab",
    "board-dag-add_block": 1,
    "board-dag-append_block": 1,
    "board-dag-network_initialized": true,
    "board-dag-network_selected": "vllhvqwpztmjsbh",
    "board-dag-remove": 0,
    "board-dag-scoutbar": "select_block",
    "board-dag-scoutbar-configuration": {
      "id": "board-dag-scoutbar",
      "theme": "light",
      "placeholder": "Search for a block",
      "actions": [
        {
          "children": [
            {
              "children": {
                "ariaLabel": "dataset_block",
                "label": "dataset block ()",
                "description": "Choose a dataset from a package",
                "closeOnClick": true
              },
              "class": "scout_action"
            }
          ],
          "label": "data",
          "class": "scout_section"
        },
        {
          "children": [
            {
              "children": {
                "ariaLabel": "join_block",
                "label": "join block ()",
                "description": "Join together two data.frames",
                "closeOnClick": true
              },
              "class": "scout_action"
            },
            {
              "children": {
                "ariaLabel": "select_block",
                "label": "select block ()",
                "description": "Subset columns in a data.frame",
                "closeOnClick": true
              },
              "class": "scout_action"
            }
          ],
          "label": "transform",
          "class": "scout_section"
        }
      ],
      "revealScoutbar": true
    },
    "board-mode": true,
    "board-sidebar": true,
    "board-vllhvqwpztmjsbh-expression-dataset": "CO2",
    "board-vllhvqwpztmjsbh-result_cell_clicked": {

    },
    "board-vllhvqwpztmjsbh-result_cells_selected": [

    ],
    "board-vllhvqwpztmjsbh-result_columns_selected": null,
    "board-vllhvqwpztmjsbh-result_rows_all": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84
    ],
    "board-vllhvqwpztmjsbh-result_rows_current": [
      1,
      2,
      3,
      4,
      5
    ],
    "board-vllhvqwpztmjsbh-result_rows_selected": null,
    "board-vllhvqwpztmjsbh-result_search": "",
    "board-vllhvqwpztmjsbh-result_state": {
      "start": 0,
      "length": 5,
      "order": [

      ],
      "search": {
        "search": "",
        "smart": true,
        "regex": false,
        "caseInsensitive": true
      },
      "columns": [
        {
          "visible": true,
          "search": {
            "search": "",
            "smart": true,
            "regex": false,
            "caseInsensitive": true
          }
        },
        {
          "visible": true,
          "search": {
            "search": "",
            "smart": true,
            "regex": false,
            "caseInsensitive": true
          }
        },
        {
          "visible": true,
          "search": {
            "search": "",
            "smart": true,
            "regex": false,
            "caseInsensitive": true
          }
        },
        {
          "visible": true,
          "search": {
            "search": "",
            "smart": true,
            "regex": false,
            "caseInsensitive": true
          }
        },
        {
          "visible": true,
          "search": {
            "search": "",
            "smart": true,
            "regex": false,
            "caseInsensitive": true
          }
        },
        {
          "visible": true,
          "search": {
            "search": "",
            "smart": true,
            "regex": false,
            "caseInsensitive": true
          }
        }
      ]
    }
  },
  "output": {
    "board-dag-data_source_ui": {
      "message": "",
      "call": "NULL",
      "type": [
        "shiny.silent.error",
        "validation"
      ]
    },
    "board-dag-edges": "                               id            from              to label arrows\n1 vllhvqwpztmjsbh_udrztahoztxbdte vllhvqwpztmjsbh udrztahoztxbdte  data     to",
    "board-dag-network": {
      "x": {
        "nodes": {

        },
        "edges": {

        },
        "nodesToDataframe": true,
        "edgesToDataframe": true,
        "options": {
          "width": "100%",
          "height": "100%",
          "nodes": {
            "shape": "dot"
          },
          "manipulation": {
            "enabled": false
          },
          "edges": {
            "length": 200
          }
        },
        "groups": null,
        "width": "100%",
        "height": "100vh",
        "idselection": {
          "enabled": true,
          "style": "width: 150px; height: 26px",
          "useLabels": true,
          "main": "Select by id"
        },
        "byselection": {
          "enabled": false,
          "style": "width: 150px; height: 26px",
          "multiple": false,
          "hideColor": "rgba(200,200,200,0.5)",
          "highlight": false
        },
        "main": null,
        "submain": null,
        "footer": null,
        "background": "rgba(0, 0, 0, 0)",
        "highlight": {
          "enabled": false,
          "hoverNearest": false,
          "degree": 1,
          "algorithm": "all",
          "hideColor": "rgba(200,200,200,0.5)",
          "labelOnly": true
        },
        "collapse": {
          "enabled": false,
          "fit": false,
          "resetHighlight": true,
          "clusterOptions": null,
          "keepCoord": true,
          "labelSuffix": "(cluster)"
        }
      },
      "evals": [

      ],
      "jsHooks": [

      ],
      "deps": [

      ]
    },
    "board-dag-nodes": "               id         label           title  shape stack icon.code\n1 vllhvqwpztmjsbh dataset_block vllhvqwpztmjsbh circle    NA        NA\n2 udrztahoztxbdte  select_block udrztahoztxbdte circle    NA        NA",
    "board-node_ui": {
      "html": "<div class=\"form-group shiny-input-container\">\n  <label class=\"control-label\" id=\"board-vllhvqwpztmjsbh-expression-dataset-label\" for=\"board-vllhvqwpztmjsbh-expression-dataset\">Dataset<\/label>\n  <div>\n    <select id=\"board-vllhvqwpztmjsbh-expression-dataset\" class=\"shiny-input-select\"><option value=\"BOD\">BOD<\/option>\n<option value=\"CO2\" selected>CO2<\/option>\n<option value=\"ChickWeight\">ChickWeight<\/option>\n<option value=\"DNase\">DNase<\/option>\n<option value=\"Formaldehyde\">Formaldehyde<\/option>\n<option value=\"Indometh\">Indometh<\/option>\n<option value=\"InsectSprays\">InsectSprays<\/option>\n<option value=\"LifeCycleSavings\">LifeCycleSavings<\/option>\n<option value=\"Loblolly\">Loblolly<\/option>\n<option value=\"Orange\">Orange<\/option>\n<option value=\"OrchardSprays\">OrchardSprays<\/option>\n<option value=\"PlantGrowth\">PlantGrowth<\/option>\n<option value=\"Puromycin\">Puromycin<\/option>\n<option value=\"Theoph\">Theoph<\/option>\n<option value=\"ToothGrowth\">ToothGrowth<\/option>\n<option value=\"USArrests\">USArrests<\/option>\n<option value=\"USJudgeRatings\">USJudgeRatings<\/option>\n<option value=\"airquality\">airquality<\/option>\n<option value=\"anscombe\">anscombe<\/option>\n<option value=\"attenu\">attenu<\/option>\n<option value=\"attitude\">attitude<\/option>\n<option value=\"beaver1\">beaver1<\/option>\n<option value=\"beaver2\">beaver2<\/option>\n<option value=\"cars\">cars<\/option>\n<option value=\"chickwts\">chickwts<\/option>\n<option value=\"esoph\">esoph<\/option>\n<option value=\"faithful\">faithful<\/option>\n<option value=\"freeny\">freeny<\/option>\n<option value=\"infert\">infert<\/option>\n<option value=\"iris\">iris<\/option>\n<option value=\"longley\">longley<\/option>\n<option value=\"morley\">morley<\/option>\n<option value=\"mtcars\">mtcars<\/option>\n<option value=\"npk\">npk<\/option>\n<option value=\"pressure\">pressure<\/option>\n<option value=\"quakes\">quakes<\/option>\n<option value=\"randu\">randu<\/option>\n<option value=\"rock\">rock<\/option>\n<option value=\"sleep\">sleep<\/option>\n<option value=\"stackloss\">stackloss<\/option>\n<option value=\"swiss\">swiss<\/option>\n<option value=\"trees\">trees<\/option>\n<option value=\"warpbreaks\">warpbreaks<\/option>\n<option value=\"women\">women<\/option><\/select>\n    <script type=\"application/json\" data-for=\"board-vllhvqwpztmjsbh-expression-dataset\" data-nonempty=\"\">{\"plugins\":[\"selectize-plugin-a11y\"]}<\/script>\n  <\/div>\n<\/div>\n<div class=\"datatables html-widget html-widget-output shiny-report-size html-fill-item\" id=\"board-vllhvqwpztmjsbh-result\" style=\"width:100%;height:auto;\"><\/div>",
      "deps": [
        {
          "name": "selectize",
          "version": "0.15.2",
          "src": {
            "href": "selectize-0.15.2"
          },
          "meta": null,
          "script": [
            "selectize.min.js",
            "selectize-plugin-a11y.min.js"
          ],
          "stylesheet": "selectize.css",
          "head": null,
          "attachment": null,
          "package": null,
          "all_files": true
        },
        {
          "name": "htmltools-fill",
          "version": "0.5.8.1",
          "src": {
            "href": "htmltools-fill-0.5.8.1"
          },
          "meta": null,
          "script": null,
          "stylesheet": "fill.css",
          "head": null,
          "attachment": null,
          "all_files": true
        },
        {
          "name": "htmlwidgets",
          "version": "1.6.4",
          "src": {
            "href": "htmlwidgets-1.6.4"
          },
          "meta": null,
          "script": "htmlwidgets.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": true
        },
        {
          "name": "datatables-css",
          "version": "0.0.0",
          "src": {
            "href": "datatables-css-0.0.0"
          },
          "meta": null,
          "script": null,
          "stylesheet": "datatables-crosstalk.css",
          "head": null,
          "attachment": null,
          "all_files": true
        },
        {
          "name": "datatables-binding",
          "version": "0.33",
          "src": {
            "href": "datatables-binding-0.33"
          },
          "meta": null,
          "script": "datatables.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": false
        },
        {
          "name": "jquery",
          "version": "3.5.1",
          "src": {
            "href": "jquery-3.5.1"
          },
          "meta": null,
          "script": "jquery.min.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": true
        },
        {
          "name": "crosstalk",
          "version": "1.2.1",
          "src": {
            "href": "crosstalk-1.2.1"
          },
          "meta": null,
          "script": "js/crosstalk.min.js",
          "stylesheet": "css/crosstalk.min.css",
          "head": null,
          "attachment": null,
          "all_files": true
        }
      ]
    },
    "board-vllhvqwpztmjsbh-result": {
      "x": {
        "style": "bootstrap5",
        "filter": "none",
        "vertical": false,
        "container": "<table class=\"table table-striped table-hover row-border order-column display\">\n  <thead>\n    <tr>\n      <th> <\/th>\n      <th>Plant<\/th>\n      <th>Type<\/th>\n      <th>Treatment<\/th>\n      <th>conc<\/th>\n      <th>uptake<\/th>\n    <\/tr>\n  <\/thead>\n<\/table>",
        "options": {
          "pageLength": 5,
          "processing": false,
          "columnDefs": [
            {
              "className": "dt-right",
              "targets": [
                4,
                5
              ]
            },
            {
              "orderable": false,
              "targets": 0
            },
            {
              "name": " ",
              "targets": 0
            },
            {
              "name": "Plant",
              "targets": 1
            },
            {
              "name": "Type",
              "targets": 2
            },
            {
              "name": "Treatment",
              "targets": 3
            },
            {
              "name": "conc",
              "targets": 4
            },
            {
              "name": "uptake",
              "targets": 5
            }
          ],
          "order": [

          ],
          "autoWidth": false,
          "orderClasses": false,
          "lengthMenu": [
            5,
            10,
            25,
            50,
            100
          ],
          "ajax": {
            "type": "POST",
            "data": "function(d) {\nd.search.caseInsensitive = true;\nd.search.smart = true;\nd.escape = true;\nvar encodeAmp = function(x) { x.value = x.value.replace(/&/g, \"%26\"); }\nencodeAmp(d.search);\n$.each(d.columns, function(i, v) {encodeAmp(v.search);});\n}"
          },
          "serverSide": true
        },
        "selection": {
          "mode": "none",
          "selected": null,
          "target": "row",
          "selectable": null
        }
      },
      "evals": [
        "options.ajax.data"
      ],
      "jsHooks": [

      ],
      "deps": [
        {
          "name": "jquery",
          "version": "3.6.0",
          "src": {
            "href": "jquery-3.6.0"
          },
          "meta": null,
          "script": "jquery-3.6.0.min.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": true
        },
        {
          "name": "dt-core-bootstrap5",
          "version": "1.13.6",
          "src": {
            "href": "dt-core-bootstrap5-1.13.6"
          },
          "meta": null,
          "script": [
            "js/jquery.dataTables.min.js",
            "js/dataTables.bootstrap5.min.js"
          ],
          "stylesheet": "css/dataTables.bootstrap5.min.css",
          "head": null,
          "attachment": null,
          "package": null,
          "all_files": false
        },
        {
          "name": "bootstrap",
          "version": "5.3.1",
          "src": {
            "href": "bootstrap-5.3.1"
          },
          "meta": {
            "viewport": "width=device-width, initial-scale=1, shrink-to-fit=no"
          },
          "script": "bootstrap.bundle.min.js",
          "stylesheet": "bootstrap.min.css",
          "head": null,
          "attachment": null,
          "package": null,
          "all_files": true
        },
        {
          "name": "bs3compat",
          "version": "0.8.0",
          "src": {
            "href": "bs3compat-0.8.0"
          },
          "meta": null,
          "script": [
            "transition.js",
            "tabs.js",
            "bs3compat.js"
          ],
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": true
        },
        {
          "name": "crosstalk",
          "version": "1.2.1",
          "src": {
            "href": "crosstalk-1.2.1"
          },
          "meta": null,
          "script": "js/crosstalk.min.js",
          "stylesheet": "css/crosstalk.min.css",
          "head": null,
          "attachment": null,
          "all_files": true
        }
      ]
    }
  },
  "export": {
    "board-blocks": {
      "vllhvqwpztmjsbh": {
        "block": {
          "expr_server": [
            "function () ",
            "{",
            "    moduleServer(\"expression\", function(input, output, session) {",
            "        list(expr = reactive(eval(bquote(as.call(c(as.symbol(\"::\"), ",
            "            quote(.(pkg)), quote(.(dat)))), list(pkg = as.name(package), ",
            "            dat = as.name(input$dataset))))), state = list(dataset = reactive(input$dataset), ",
            "            package = package))",
            "    })",
            "}"
          ],
          "expr_ui": [
            "function (ns, dataset, package) ",
            "{",
            "    selectInput(inputId = ns(\"expression\", \"dataset\"), label = \"Dataset\", ",
            "        choices = list_datasets(package), selected = dataset)",
            "}"
          ]
        },
        "server": {
          "result": [
            "structure(function () ",
            "{",
            "    .dependents$register()",
            "    if (.invalidated || .running) {",
            "        ..stacktraceoff..(self$.updateValue())",
            "    }",
            "    if (.error) {",
            "        stop(.value)",
            "    }",
            "    if (.visible) ",
            "        .value",
            "    else invisible(.value)",
            "}, observable = <environment>, cacheHint = list(userExpr = {",
            "    eval(exp$expr(), lapply(data, reval))",
            "}), class = \"function\")"
          ],
          "expr": [
            "structure(function () ",
            "{",
            "    .dependents$register()",
            "    if (.invalidated || .running) {",
            "        ..stacktraceoff..(self$.updateValue())",
            "    }",
            "    if (.error) {",
            "        stop(.value)",
            "    }",
            "    if (.visible) ",
            "        .value",
            "    else invisible(.value)",
            "}, observable = <environment>, cacheHint = list(userExpr = {",
            "    eval(bquote(as.call(c(as.symbol(\"::\"), quote(.(pkg)), quote(.(dat)))), ",
            "        list(pkg = as.name(package), dat = as.name(input$dataset))))",
            "}), class = \"function\")"
          ],
          "state": {
            "dataset": [
              "structure(function () ",
              "{",
              "    .dependents$register()",
              "    if (.invalidated || .running) {",
              "        ..stacktraceoff..(self$.updateValue())",
              "    }",
              "    if (.error) {",
              "        stop(.value)",
              "    }",
              "    if (.visible) ",
              "        .value",
              "    else invisible(.value)",
              "}, observable = <environment>, cacheHint = list(userExpr = {",
              "    input$dataset",
              "}), class = \"function\")"
            ],
            "package": "datasets"
          }
        }
      },
      "udrztahoztxbdte": {
        "block": {
          "expr_server": [
            "function (data) ",
            "{",
            "    moduleServer(\"expression\", function(input, output, session) {",
            "        sels <- reactiveVal(columns)",
            "        cols <- reactive(colnames(data()))",
            "        observeEvent(input$columns, sels(input$columns))",
            "        observe(updateSelectInput(session, inputId = \"columns\", ",
            "            choices = cols(), selected = sels()))",
            "        list(expr = reactive(bquote(dplyr::select(data, ..(cols)), ",
            "            list(cols = lapply(sels(), as.name)), splice = TRUE)), ",
            "            state = list(columns = reactive(sels()), choices = reactive(cols())))",
            "    })",
            "}"
          ],
          "expr_ui": [
            "function (ns, columns, choices = character()) ",
            "{",
            "    selectInput(inputId = ns(\"expression\", \"columns\"), label = \"Columns\", ",
            "        choices = choices, selected = columns, multiple = TRUE)",
            "}"
          ]
        },
        "server": {
          "result": [
            "structure(function () ",
            "{",
            "    .dependents$register()",
            "    if (.invalidated || .running) {",
            "        ..stacktraceoff..(self$.updateValue())",
            "    }",
            "    if (.error) {",
            "        stop(.value)",
            "    }",
            "    if (.visible) ",
            "        .value",
            "    else invisible(.value)",
            "}, observable = <environment>, cacheHint = list(userExpr = {",
            "    eval(exp$expr(), lapply(data, reval))",
            "}), class = \"function\")"
          ],
          "expr": [
            "structure(function () ",
            "{",
            "    .dependents$register()",
            "    if (.invalidated || .running) {",
            "        ..stacktraceoff..(self$.updateValue())",
            "    }",
            "    if (.error) {",
            "        stop(.value)",
            "    }",
            "    if (.visible) ",
            "        .value",
            "    else invisible(.value)",
            "}, observable = <environment>, cacheHint = list(userExpr = {",
            "    bquote(dplyr::select(data, ..(cols)), list(cols = lapply(sels(), ",
            "        as.name)), splice = TRUE)",
            "}), class = \"function\")"
          ],
          "state": {
            "columns": [
              "structure(function () ",
              "{",
              "    .dependents$register()",
              "    if (.invalidated || .running) {",
              "        ..stacktraceoff..(self$.updateValue())",
              "    }",
              "    if (.error) {",
              "        stop(.value)",
              "    }",
              "    if (.visible) ",
              "        .value",
              "    else invisible(.value)",
              "}, observable = <environment>, cacheHint = list(userExpr = {",
              "    sels()",
              "}), class = \"function\")"
            ],
            "choices": [
              "structure(function () ",
              "{",
              "    .dependents$register()",
              "    if (.invalidated || .running) {",
              "        ..stacktraceoff..(self$.updateValue())",
              "    }",
              "    if (.error) {",
              "        stop(.value)",
              "    }",
              "    if (.visible) ",
              "        .value",
              "    else invisible(.value)",
              "}, observable = <environment>, cacheHint = list(userExpr = {",
              "    cols()",
              "}), class = \"function\")"
            ]
          }
        }
      }
    },
    "board-network_out": {
      "edges": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$edges",
        "}), class = \"function\")"
      ],
      "nodes": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$nodes",
        "}), class = \"function\")"
      ],
      "selected_node": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    input$network_selected",
        "}), class = \"function\")"
      ],
      "added_node": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$new_block",
        "}), class = \"function\")"
      ],
      "removed_node": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    hybrid_chain(eventFunc(), function(value) {",
        "        if (ignoreInit && !initialized) {",
        "            initialized <<- TRUE",
        "            req(FALSE)",
        "        }",
        "        req(!ignoreNULL || !isNullEvent(value))",
        "        isolate(valueFunc())",
        "    })",
        "}), class = \"function\")"
      ],
      "added_edge": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$added_edge",
        "}), class = \"function\")"
      ],
      "removed_edge": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$removed_edge",
        "}), class = \"function\")"
      ]
    }
  }
}
