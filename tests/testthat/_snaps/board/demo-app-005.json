{
  "input": {
    "DataTables_Table_1_length": "5",
    "board-dag-add_block": 1,
    "board-dag-append_block": 1,
    "board-dag-canvas_debug_accordion": null,
    "board-dag-network_initialized": true,
    "board-dag-network_positions": {
      "udrztahoztxbdte": {
        "x": 45,
        "y": 16
      },
      "tkbuyepwijxjfco": {
        "x": 181,
        "y": 81
      }
    },
    "board-dag-network_selected": "tkbuyepwijxjfco",
    "board-dag-remove": 0,
    "board-dag-scoutbar": "select_block",
    "board-dag-scoutbar-configuration": {
      "id": "board-dag-scoutbar",
      "theme": "light",
      "placeholder": "Search for a block",
      "actions": [
        {
          "children": [
            {
              "children": {
                "ariaLabel": "dataset_block",
                "label": "dataset block",
                "description": "Choose a dataset from a package",
                "closeOnClick": true
              },
              "class": "scout_action"
            }
          ],
          "label": "data",
          "class": "scout_section"
        },
        {
          "children": [
            {
              "children": {
                "ariaLabel": "join_block",
                "label": "join block",
                "description": "Join together two data.frames",
                "closeOnClick": true
              },
              "class": "scout_action"
            },
            {
              "children": {
                "ariaLabel": "select_block",
                "label": "select block",
                "description": "Subset columns in a data.frame",
                "closeOnClick": true
              },
              "class": "scout_action"
            },
            {
              "children": {
                "ariaLabel": "subset_block",
                "label": "subset block",
                "description": "Row and column subsetting",
                "closeOnClick": true
              },
              "class": "scout_action"
            }
          ],
          "label": "transform",
          "class": "scout_section"
        }
      ],
      "revealScoutbar": true
    },
    "board-dashboard": false,
    "board-grid_layout": {
      "alwaysShowResizeHandle": false,
      "cellHeight": 140,
      "float": true,
      "disableDrag": false,
      "disableResize": false,
      "removable": true,
      "resizable": {
        "handles": "all"
      },
      "acceptWidgets": true,
      "children": [

      ]
    },
    "board-mode": true,
    "board-properties": true,
    "board-tkbuyepwijxjfco-expression-columns": null,
    "board-tkbuyepwijxjfco-mode": false,
    "board-udrztahoztxbdte-expression-dataset": "CO2",
    "board-udrztahoztxbdte-mode": false,
    "board-udrztahoztxbdte-result_cell_clicked": {

    },
    "board-udrztahoztxbdte-result_cells_selected": [

    ],
    "board-udrztahoztxbdte-result_columns_selected": null,
    "board-udrztahoztxbdte-result_rows_all": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84
    ],
    "board-udrztahoztxbdte-result_rows_current": [
      1,
      2,
      3,
      4,
      5
    ],
    "board-udrztahoztxbdte-result_rows_selected": null,
    "board-udrztahoztxbdte-result_search": "",
    "board-udrztahoztxbdte-result_state": {
      "start": 0,
      "length": 5,
      "order": [

      ],
      "search": {
        "search": "",
        "smart": true,
        "regex": false,
        "caseInsensitive": true
      },
      "columns": [
        {
          "visible": true,
          "search": {
            "search": "",
            "smart": true,
            "regex": false,
            "caseInsensitive": true
          }
        },
        {
          "visible": true,
          "search": {
            "search": "",
            "smart": true,
            "regex": false,
            "caseInsensitive": true
          }
        },
        {
          "visible": true,
          "search": {
            "search": "",
            "smart": true,
            "regex": false,
            "caseInsensitive": true
          }
        },
        {
          "visible": true,
          "search": {
            "search": "",
            "smart": true,
            "regex": false,
            "caseInsensitive": true
          }
        },
        {
          "visible": true,
          "search": {
            "search": "",
            "smart": true,
            "regex": false,
            "caseInsensitive": true
          }
        },
        {
          "visible": true,
          "search": {
            "search": "",
            "smart": true,
            "regex": false,
            "caseInsensitive": true
          }
        }
      ]
    }
  },
  "output": {
    "board-dag-network": {
      "x": {
        "nodes": {

        },
        "edges": {

        },
        "nodesToDataframe": true,
        "edgesToDataframe": true,
        "options": {
          "width": "100%",
          "height": "100%",
          "nodes": {
            "shape": "dot"
          },
          "manipulation": {
            "enabled": true,
            "initiallyActive": true,
            "addNode": false,
            "deleteNode": false,
            "deleteEdge": false,
            "editEdge": false
          },
          "interaction": {
            "hover": false,
            "multiselect": true,
            "selectConnectedEdges": false,
            "zoomSpeed": 1
          },
          "edges": {
            "length": 300,
            "smooth": false
          },
          "physics": {
            "solver": "forceAtlas2Based",
            "maxVelocity": 50,
            "minVelocity": 0.1,
            "timestep": 0.5,
            "stabilization": {
              "enabled": true,
              "iterations": 1000,
              "updateInterval": 100,
              "onlyDynamicEdges": false,
              "fit": true
            },
            "adaptiveTimestep": true
          }
        },
        "groups": null,
        "width": "100%",
        "height": "100vh",
        "idselection": {
          "enabled": true,
          "style": "width: 150px; height: 26px",
          "useLabels": true,
          "main": "Select by id"
        },
        "byselection": {
          "enabled": false,
          "style": "width: 150px; height: 26px",
          "multiple": false,
          "hideColor": "rgba(200,200,200,0.5)",
          "highlight": false
        },
        "main": null,
        "submain": null,
        "footer": null,
        "background": "rgba(0, 0, 0, 0)",
        "tooltipStay": 300,
        "tooltipStyle": "position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);",
        "opts_manipulation": {
          "datacss": "table.legend_table {\n  font-size: 11px;\n  border-width:1px;\n  border-color:#d3d3d3;\n  border-style:solid;\n}\ntable.legend_table td {\n  border-width:1px;\n  border-color:#d3d3d3;\n  border-style:solid;\n  padding: 2px;\n}\ndiv.table_content {\n  width:80px;\n  text-align:center;\n}\ndiv.table_description {\n  width:100px;\n}\n\n.operation {\n  font-size:20px;\n}\n\n.network-popUp {\n  display:none;\n  z-index:299;\n  width:250px;\n  /*height:150px;*/\n  background-color: #f9f9f9;\n  border-style:solid;\n  border-width:1px;\n  border-color: #0d0d0d;\n  padding:10px;\n  text-align: center;\n  position:fixed;\n  top:50%;  \n  left:50%;  \n  margin:-100px 0 0 -100px;  \n\n}",
          "addNodeCols": [
            "id",
            "label"
          ],
          "editNodeCols": [
            "id",
            "label"
          ],
          "tab_add_node": "<span id=\"addnode-operation\" class = \"operation\">node<\/span> <br><table style=\"margin:auto;\"><tr><td>id<\/td><td><input id=\"addnode-id\"  type= \"text\" value=\"new value\"><\/td><\/tr><tr><td>label<\/td><td><input id=\"addnode-label\"  type= \"text\" value=\"new value\"><\/td><\/tr><\/table><input type=\"button\" value=\"save\" id=\"addnode-saveButton\"><\/button><input type=\"button\" value=\"cancel\" id=\"addnode-cancelButton\"><\/button>",
          "tab_edit_node": "<span id=\"editnode-operation\" class = \"operation\">node<\/span> <br><table style=\"margin:auto;\"><tr><td>id<\/td><td><input id=\"editnode-id\"  type= \"text\" value=\"new value\"><\/td><\/tr><tr><td>label<\/td><td><input id=\"editnode-label\"  type= \"text\" value=\"new value\"><\/td><\/tr><\/table><input type=\"button\" value=\"save\" id=\"editnode-saveButton\"><\/button><input type=\"button\" value=\"cancel\" id=\"editnode-cancelButton\"><\/button>"
        },
        "highlight": {
          "enabled": false,
          "hoverNearest": false,
          "degree": 1,
          "algorithm": "all",
          "hideColor": "rgba(200,200,200,0.5)",
          "labelOnly": true
        },
        "collapse": {
          "enabled": true,
          "fit": false,
          "resetHighlight": true,
          "clusterOptions": null,
          "keepCoord": true,
          "labelSuffix": "(cluster)"
        },
        "events": {
          "oncontext": "function(e) {\n              e.event.preventDefault(); // avoid showing web inspector ...\n              Shiny.setInputValue('board-dag-node_right_clicked', e.nodes, {priority: 'event'});\n            }",
          "select": "function(e) {\n              if (e.nodes.length > 1) {\n                Shiny.setInputValue('board-dag-selected_nodes', e.nodes, {priority: 'event'});\n              }\n            }",
          "selectEdge": "function(e) {\n              Shiny.setInputValue('board-dag-selected_edge', e.edges[0], {priority: 'event'});\n            }",
          "controlNodeDragEnd": "function(e) {\n              Shiny.setInputValue('board-dag-new_edge', e.controlEdge, {priority: 'event'});\n              let target = $(`.${e.event.target.offsetParent.className}`)\n                .closest('.visNetwork')\n                .attr('id');\n              // Re-enable add edge mode\n              setTimeout(() => {\n                window.HTMLWidgets.find(`#${target}`).network.addEdgeMode();\n              }, 500);\n            ;}"
        },
        "OnceEvents": {
          "stabilized": "function() {\n              var network = this;\n              \n              network.on('afterDrawing', function(ctx) {\n                var edges = network.body.edges;\n                var nodes = network.body.nodes;\n                \n                Object.keys(edges).forEach(function(edgeId) {\n                  var edge = edges[edgeId];\n                  var fromNode = nodes[edge.fromId];\n                  var toNode = nodes[edge.toId];\n                  \n                  // Calculate intersection points\n                  if (fromNode && toNode) {\n                    // Get positions\n                    var fromX = fromNode.x;\n                    var fromY = fromNode.y;\n                    var toX = toNode.x;\n                    var toY = toNode.y;\n                    \n                    // Calculate angles and distances\n                    var angle = Math.atan2(toY - fromY, toX - fromX);\n                    var reverseAngle = Math.atan2(fromY - toY, fromX - toX);\n                    \n                    // Get node radii (using shape.width since shape.radius might not be available)\n                    var fromRadius = fromNode.shape.width / 2;\n                    var toRadius = toNode.shape.width / 2;\n                    \n                    // Calculate intersection points\n                    var fromIntersectX = fromX + (Math.cos(angle) * fromRadius);\n                    var fromIntersectY = fromY + (Math.sin(angle) * fromRadius);\n                    var toIntersectX = toX + (Math.cos(reverseAngle) * toRadius);\n                    var toIntersectY = toY + (Math.sin(reverseAngle) * toRadius);\n                    \n                    // Draw connection points at intersection\n                    ctx.beginPath();\n                    ctx.arc(fromIntersectX, fromIntersectY, 4, 0, 2 * Math.PI);\n                    ctx.fillStyle = '#2B7CE9';\n                    ctx.fill();\n                    ctx.strokeStyle = 'white';\n                    ctx.lineWidth = 1;\n                    ctx.stroke();\n                    \n                    ctx.beginPath();\n                    ctx.arc(toIntersectX, toIntersectY, 4, 0, 2 * Math.PI);\n                    ctx.fillStyle = '#2B7CE9';\n                    ctx.fill();\n                    ctx.strokeStyle = 'white';\n                    ctx.lineWidth = 1;\n                    ctx.stroke();\n                  }\n                });\n              });\n            }"
        }
      },
      "evals": [
        "events.oncontext",
        "events.select",
        "events.selectEdge",
        "events.controlNodeDragEnd",
        "OnceEvents.stabilized"
      ],
      "jsHooks": [

      ],
      "deps": [

      ]
    },
    "board-grid": {
      "x": {
        "html": "",
        "options": {
          "alwaysShowResizeHandle": false,
          "animate": true,
          "cellHeight": "140px",
          "column": 12,
          "float": true,
          "disableDrag": false,
          "disableResize": false,
          "margin": "10px",
          "maxRow": 0,
          "minRow": 0,
          "removable": true,
          "resizable": {
            "handles": "all"
          },
          "acceptWidgets": true
        },
        "bg": "#e5e7eb"
      },
      "evals": [

      ],
      "jsHooks": [

      ],
      "deps": [

      ]
    },
    "board-tkbuyepwijxjfco-result": [
      "",
      "NULL",
      "c(\"shiny.silent.error\", \"validation\")"
    ],
    "board-udrztahoztxbdte-result": {
      "x": {
        "style": "bootstrap5",
        "filter": "none",
        "vertical": false,
        "container": "<table class=\"table table-striped table-hover row-border order-column display\">\n  <thead>\n    <tr>\n      <th> <\/th>\n      <th>Plant<\/th>\n      <th>Type<\/th>\n      <th>Treatment<\/th>\n      <th>conc<\/th>\n      <th>uptake<\/th>\n    <\/tr>\n  <\/thead>\n<\/table>",
        "options": {
          "pageLength": 5,
          "processing": false,
          "columnDefs": [
            {
              "className": "dt-right",
              "targets": [
                4,
                5
              ]
            },
            {
              "orderable": false,
              "targets": 0
            },
            {
              "name": " ",
              "targets": 0
            },
            {
              "name": "Plant",
              "targets": 1
            },
            {
              "name": "Type",
              "targets": 2
            },
            {
              "name": "Treatment",
              "targets": 3
            },
            {
              "name": "conc",
              "targets": 4
            },
            {
              "name": "uptake",
              "targets": 5
            }
          ],
          "order": [

          ],
          "autoWidth": false,
          "orderClasses": false,
          "lengthMenu": [
            5,
            10,
            25,
            50,
            100
          ],
          "ajax": {
            "type": "POST",
            "data": "function(d) {\nd.search.caseInsensitive = true;\nd.search.smart = true;\nd.escape = true;\nvar encodeAmp = function(x) { x.value = x.value.replace(/&/g, \"%26\"); }\nencodeAmp(d.search);\n$.each(d.columns, function(i, v) {encodeAmp(v.search);});\n}"
          },
          "serverSide": true
        },
        "selection": {
          "mode": "none",
          "selected": null,
          "target": "row",
          "selectable": null
        }
      },
      "evals": [
        "options.ajax.data"
      ],
      "jsHooks": [

      ],
      "deps": [
        {
          "name": "jquery",
          "version": "3.6.0",
          "src": {
            "href": "jquery-3.6.0"
          },
          "meta": null,
          "script": "jquery-3.6.0.min.js",
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": true
        },
        {
          "name": "dt-core-bootstrap5",
          "version": "1.13.6",
          "src": {
            "href": "dt-core-bootstrap5-1.13.6"
          },
          "meta": null,
          "script": [
            "js/jquery.dataTables.min.js",
            "js/dataTables.bootstrap5.min.js"
          ],
          "stylesheet": "css/dataTables.bootstrap5.min.css",
          "head": null,
          "attachment": null,
          "package": null,
          "all_files": false
        },
        {
          "name": "bootstrap",
          "version": "5.3.1",
          "src": {
            "href": "bootstrap-5.3.1"
          },
          "meta": {
            "viewport": "width=device-width, initial-scale=1, shrink-to-fit=no"
          },
          "script": "bootstrap.bundle.min.js",
          "stylesheet": "bootstrap.min.css",
          "head": null,
          "attachment": null,
          "package": null,
          "all_files": true
        },
        {
          "name": "bs3compat",
          "version": "0.8.0",
          "src": {
            "href": "bs3compat-0.8.0"
          },
          "meta": null,
          "script": [
            "transition.js",
            "tabs.js",
            "bs3compat.js"
          ],
          "stylesheet": null,
          "head": null,
          "attachment": null,
          "all_files": true
        },
        {
          "name": "crosstalk",
          "version": "1.2.1",
          "src": {
            "href": "crosstalk-1.2.1"
          },
          "meta": null,
          "script": "js/crosstalk.min.js",
          "stylesheet": "css/crosstalk.min.css",
          "head": null,
          "attachment": null,
          "all_files": true
        }
      ]
    }
  },
  "export": {
    "board-blocks": {
      "udrztahoztxbdte": {
        "block": {
          "expr_server": [
            "function () ",
            "{",
            "    moduleServer(\"expression\", function(input, output, session) {",
            "        list(expr = reactive({",
            "            eval(bquote(as.call(c(as.symbol(\"::\"), quote(.(pkg)), ",
            "                quote(.(dat)))), list(pkg = as.name(package), ",
            "                dat = as.name(input$dataset))))",
            "        }), state = list(dataset = reactive(input$dataset), package = package))",
            "    })",
            "}"
          ],
          "expr_ui": [
            "function (ns) ",
            "{",
            "    selectInput(inputId = ns(\"expression\", \"dataset\"), label = \"Dataset\", ",
            "        choices = list_datasets(package), selectize = FALSE, ",
            "        selected = dataset)",
            "}"
          ]
        },
        "server": {
          "result": [
            "structure(function () ",
            "{",
            "    .dependents$register()",
            "    if (.invalidated || .running) {",
            "        ..stacktraceoff..(self$.updateValue())",
            "    }",
            "    if (.error) {",
            "        stop(.value)",
            "    }",
            "    if (.visible) ",
            "        .value",
            "    else invisible(.value)",
            "}, observable = <environment>, cacheHint = list(userExpr = {",
            "    do.call(req, lapply(exp$state, reval_if))",
            "    tryCatch(eval(exp$expr(), lapply(data, reval)), error = function(e) {",
            "        showNotification(conditionMessage(e), duration = NULL, ",
            "            type = \"error\")",
            "        NULL",
            "    })",
            "}), class = \"function\")"
          ],
          "expr": [
            "structure(function () ",
            "{",
            "    .dependents$register()",
            "    if (.invalidated || .running) {",
            "        ..stacktraceoff..(self$.updateValue())",
            "    }",
            "    if (.error) {",
            "        stop(.value)",
            "    }",
            "    if (.visible) ",
            "        .value",
            "    else invisible(.value)",
            "}, observable = <environment>, cacheHint = list(userExpr = {",
            "    eval(bquote(as.call(c(as.symbol(\"::\"), quote(.(pkg)), quote(.(dat)))), ",
            "        list(pkg = as.name(package), dat = as.name(input$dataset))))",
            "}), class = \"function\")"
          ],
          "json": [
            "structure(function () ",
            "{",
            "    .dependents$register()",
            "    if (.invalidated || .running) {",
            "        ..stacktraceoff..(self$.updateValue())",
            "    }",
            "    if (.error) {",
            "        stop(.value)",
            "    }",
            "    if (.visible) ",
            "        .value",
            "    else invisible(.value)",
            "}, observable = <environment>, cacheHint = list(userExpr = {",
            "    to_json(x, lapply(exp$state, reval_if))",
            "}), class = \"function\")"
          ]
        },
        "mode": "editor"
      },
      "tkbuyepwijxjfco": {
        "block": {
          "expr_server": [
            "function (data) ",
            "{",
            "    moduleServer(\"expression\", function(input, output, session) {",
            "        sels <- reactiveVal(columns)",
            "        cols <- reactive(colnames(data()))",
            "        observeEvent(input$columns, sels(input$columns))",
            "        observe(updateSelectInput(session, inputId = \"columns\", ",
            "            choices = cols(), selected = sels()))",
            "        list(expr = reactive(bquote(dplyr::select(data, ..(cols)), ",
            "            list(cols = lapply(sels(), as.name)), splice = TRUE)), ",
            "            state = list(columns = reactive(sels())))",
            "    })",
            "}"
          ],
          "expr_ui": [
            "function (ns) ",
            "{",
            "    selectInput(inputId = ns(\"expression\", \"columns\"), label = \"Columns\", ",
            "        choices = list(), multiple = TRUE)",
            "}"
          ]
        },
        "server": {
          "result": [
            "structure(function () ",
            "{",
            "    .dependents$register()",
            "    if (.invalidated || .running) {",
            "        ..stacktraceoff..(self$.updateValue())",
            "    }",
            "    if (.error) {",
            "        stop(.value)",
            "    }",
            "    if (.visible) ",
            "        .value",
            "    else invisible(.value)",
            "}, observable = <environment>, cacheHint = list(userExpr = {",
            "    do.call(req, lapply(exp$state, reval_if))",
            "    tryCatch(eval(exp$expr(), lapply(data, reval)), error = function(e) {",
            "        showNotification(conditionMessage(e), duration = NULL, ",
            "            type = \"error\")",
            "        NULL",
            "    })",
            "}), class = \"function\")"
          ],
          "expr": [
            "structure(function () ",
            "{",
            "    .dependents$register()",
            "    if (.invalidated || .running) {",
            "        ..stacktraceoff..(self$.updateValue())",
            "    }",
            "    if (.error) {",
            "        stop(.value)",
            "    }",
            "    if (.visible) ",
            "        .value",
            "    else invisible(.value)",
            "}, observable = <environment>, cacheHint = list(userExpr = {",
            "    bquote(dplyr::select(data, ..(cols)), list(cols = lapply(sels(), ",
            "        as.name)), splice = TRUE)",
            "}), class = \"function\")"
          ],
          "json": [
            "structure(function () ",
            "{",
            "    .dependents$register()",
            "    if (.invalidated || .running) {",
            "        ..stacktraceoff..(self$.updateValue())",
            "    }",
            "    if (.error) {",
            "        stop(.value)",
            "    }",
            "    if (.visible) ",
            "        .value",
            "    else invisible(.value)",
            "}, observable = <environment>, cacheHint = list(userExpr = {",
            "    to_json(x, lapply(exp$state, reval_if))",
            "}), class = \"function\")"
          ]
        },
        "mode": "editor"
      }
    },
    "board-network_out": {
      "edges": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$edges",
        "}), class = \"function\")"
      ],
      "nodes": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$nodes",
        "}), class = \"function\")"
      ],
      "selected_node": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    input$network_selected",
        "}), class = \"function\")"
      ],
      "added_node": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$new_block",
        "}), class = \"function\")"
      ],
      "removed_node": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    hybrid_chain(eventFunc(), function(value) {",
        "        if (ignoreInit && !initialized) {",
        "            initialized <<- TRUE",
        "            req(FALSE)",
        "        }",
        "        req(!ignoreNULL || !isNullEvent(value))",
        "        isolate(valueFunc())",
        "    })",
        "}), class = \"function\")"
      ],
      "added_edge": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$added_edge",
        "}), class = \"function\")"
      ],
      "removed_edge": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$removed_edge",
        "}), class = \"function\")"
      ]
    }
  }
}
