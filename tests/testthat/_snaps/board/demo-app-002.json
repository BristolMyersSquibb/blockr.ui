{
  "input": {
    "board-board_tabs": "network_tab",
    "board-dag-add_block": 1,
    "board-dag-append_block": 0,
    "board-dag-network_initialized": true,
    "board-dag-network_selected": "",
    "board-dag-remove": 0,
    "board-dag-scoutbar": "dataset_block",
    "board-dag-scoutbar-configuration": {
      "id": "board-dag-scoutbar",
      "theme": "light",
      "placeholder": "Search for a block",
      "actions": [
        {
          "children": [
            {
              "children": {
                "ariaLabel": "dataset_block",
                "label": "dataset block ()",
                "description": "Choose a dataset from a package",
                "closeOnClick": true
              },
              "class": "scout_action"
            }
          ],
          "label": "data",
          "class": "scout_section"
        },
        {
          "children": [
            {
              "children": {
                "ariaLabel": "join_block",
                "label": "join block ()",
                "description": "Join together two data.frames",
                "closeOnClick": true
              },
              "class": "scout_action"
            },
            {
              "children": {
                "ariaLabel": "select_block",
                "label": "select block ()",
                "description": "Subset columns in a data.frame",
                "closeOnClick": true
              },
              "class": "scout_action"
            }
          ],
          "label": "transform",
          "class": "scout_section"
        }
      ],
      "revealScoutbar": true
    },
    "board-mode": true,
    "board-sidebar": false
  },
  "output": {
    "board-dag-edges": "data frame with 0 columns and 0 rows",
    "board-dag-network": {
      "x": {
        "nodes": {

        },
        "edges": {

        },
        "nodesToDataframe": true,
        "edgesToDataframe": true,
        "options": {
          "width": "100%",
          "height": "100%",
          "nodes": {
            "shape": "dot"
          },
          "manipulation": {
            "enabled": false
          },
          "edges": {
            "length": 200
          }
        },
        "groups": null,
        "width": "100%",
        "height": "100vh",
        "idselection": {
          "enabled": true,
          "style": "width: 150px; height: 26px",
          "useLabels": true,
          "main": "Select by id"
        },
        "byselection": {
          "enabled": false,
          "style": "width: 150px; height: 26px",
          "multiple": false,
          "hideColor": "rgba(200,200,200,0.5)",
          "highlight": false
        },
        "main": null,
        "submain": null,
        "footer": null,
        "background": "rgba(0, 0, 0, 0)",
        "highlight": {
          "enabled": false,
          "hoverNearest": false,
          "degree": 1,
          "algorithm": "all",
          "hideColor": "rgba(200,200,200,0.5)",
          "labelOnly": true
        },
        "collapse": {
          "enabled": false,
          "fit": false,
          "resetHighlight": true,
          "clusterOptions": null,
          "keepCoord": true,
          "labelSuffix": "(cluster)"
        }
      },
      "evals": [

      ],
      "jsHooks": [

      ],
      "deps": [

      ]
    },
    "board-dag-nodes": "               id         label           title  shape stack icon.code\n1 vllhvqwpztmjsbh dataset_block vllhvqwpztmjsbh circle    NA        NA"
  },
  "export": {
    "board-blocks": {
      "vllhvqwpztmjsbh": {
        "block": {
          "expr_server": [
            "function () ",
            "{",
            "    moduleServer(\"expression\", function(input, output, session) {",
            "        list(expr = reactive(eval(bquote(as.call(c(as.symbol(\"::\"), ",
            "            quote(.(pkg)), quote(.(dat)))), list(pkg = as.name(package), ",
            "            dat = as.name(input$dataset))))), state = list(dataset = reactive(input$dataset), ",
            "            package = package))",
            "    })",
            "}"
          ],
          "expr_ui": [
            "function (ns, dataset, package) ",
            "{",
            "    selectInput(inputId = ns(\"expression\", \"dataset\"), label = \"Dataset\", ",
            "        choices = list_datasets(package), selected = dataset)",
            "}"
          ]
        },
        "server": {
          "result": [
            "structure(function () ",
            "{",
            "    .dependents$register()",
            "    if (.invalidated || .running) {",
            "        ..stacktraceoff..(self$.updateValue())",
            "    }",
            "    if (.error) {",
            "        stop(.value)",
            "    }",
            "    if (.visible) ",
            "        .value",
            "    else invisible(.value)",
            "}, observable = <environment>, cacheHint = list(userExpr = {",
            "    eval(exp$expr(), lapply(data, reval))",
            "}), class = \"function\")"
          ],
          "expr": [
            "structure(function () ",
            "{",
            "    .dependents$register()",
            "    if (.invalidated || .running) {",
            "        ..stacktraceoff..(self$.updateValue())",
            "    }",
            "    if (.error) {",
            "        stop(.value)",
            "    }",
            "    if (.visible) ",
            "        .value",
            "    else invisible(.value)",
            "}, observable = <environment>, cacheHint = list(userExpr = {",
            "    eval(bquote(as.call(c(as.symbol(\"::\"), quote(.(pkg)), quote(.(dat)))), ",
            "        list(pkg = as.name(package), dat = as.name(input$dataset))))",
            "}), class = \"function\")"
          ],
          "state": {
            "dataset": [
              "structure(function () ",
              "{",
              "    .dependents$register()",
              "    if (.invalidated || .running) {",
              "        ..stacktraceoff..(self$.updateValue())",
              "    }",
              "    if (.error) {",
              "        stop(.value)",
              "    }",
              "    if (.visible) ",
              "        .value",
              "    else invisible(.value)",
              "}, observable = <environment>, cacheHint = list(userExpr = {",
              "    input$dataset",
              "}), class = \"function\")"
            ],
            "package": "datasets"
          }
        }
      }
    },
    "board-network_out": {
      "edges": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$edges",
        "}), class = \"function\")"
      ],
      "nodes": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$nodes",
        "}), class = \"function\")"
      ],
      "selected_node": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    input$network_selected",
        "}), class = \"function\")"
      ],
      "added_node": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$new_block",
        "}), class = \"function\")"
      ],
      "removed_node": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    hybrid_chain(eventFunc(), function(value) {",
        "        if (ignoreInit && !initialized) {",
        "            initialized <<- TRUE",
        "            req(FALSE)",
        "        }",
        "        req(!ignoreNULL || !isNullEvent(value))",
        "        isolate(valueFunc())",
        "    })",
        "}), class = \"function\")"
      ],
      "added_edge": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$added_edge",
        "}), class = \"function\")"
      ],
      "removed_edge": [
        "structure(function () ",
        "{",
        "    .dependents$register()",
        "    if (.invalidated || .running) {",
        "        ..stacktraceoff..(self$.updateValue())",
        "    }",
        "    if (.error) {",
        "        stop(.value)",
        "    }",
        "    if (.visible) ",
        "        .value",
        "    else invisible(.value)",
        "}, observable = <environment>, cacheHint = list(userExpr = {",
        "    rv$removed_edge",
        "}), class = \"function\")"
      ]
    }
  }
}
