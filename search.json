[{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/articles/app-modules.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"App modules","text":"default, blockr.ui exposes dashboard module display blocks grid. short, spin app existing board, can : new_dag_board() produces board object dashboard module attached new_dashboard_module(). serve() function starts Shiny app. ... placeholder blocks, stacks links want display app starts.","code":"my_board <- new_dag_board(   ...,   modules = new_dashboard_module() )  serve(my_board)"},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/articles/app-modules.html","id":"creating-a-new-board-module","dir":"Articles","previous_headings":"Develop custom extensions","what":"Creating a new board module","title":"App modules","text":"create new board module, can use new_board_module() function. function takes module argument defines module’s UI server logic: module_ui module_server functions define module’s user interface server logic, respectively. id argument used identify module, title argument used display module’s title app. context menu list context menu items available app someone right-clicks network.","code":"my_module <- function(id = \"dashboard\", title = \"Dashboard\") {   new_board_module(     module_ui,     module_server,     id = id,     title = title,     context_menu = list(       # PASS context menu entries here (see below)     ),     class = \"dashboard_module\"   ) }"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/articles/app-modules.html","id":"context-menu-items","dir":"Articles","previous_headings":"Develop custom extensions","what":"Context menu items","title":"App modules","text":"context menu entry defined follows new_context_menu_entry(): parameters defined follows: name name context menu entry. js JavaScript function string containing JS function (() => { ... }) defines behavior context menu entry clicked. can access ns function get namespace module. code evaluated client side. action R function defines server-side logic context menu entry. can access input, output, session, board, update, parent arguments. condition R function defines condition context menu entry displayed. can access board, parent, target arguments. example, context menu entry named “Remove dashboard”. appears target node node currently dashboard grid. clicked, element id recovered client stored within input$<MODULE_NAMESPACE>-remove_from_dashboard. server logic observes input updates parent$in_grid list remove node grid.","code":"menu_entry <- new_context_menu_entry(   name = \"Remove from dashboard\",   js = function(ns) {     sprintf(       \"(value, target, current) => {       if (current.id === undefined) return;       Shiny.setInputValue('%s', current.id, {priority: 'event'});     }\",       ns(\"remove_from_dashboard\")     )   },   action = function(input, output, session, board, update, parent) {     observeEvent(       input$remove_from_dashboard,       {         parent$removed_from_dashboard <- input$remove_from_dashboard         parent$in_grid[[parent$removed_from_dashboard]] <- FALSE       }     )   },   condition = function(board, parent, target) {     target$type == \"node\" &&       target$id %in% names(parent$in_grid) &&       parent$in_grid[[target$id]]   } )"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/articles/app-modules.html","id":"example-a-custom-ai-chat","dir":"Articles","previous_headings":"","what":"Example: a custom AI chat","title":"App modules","text":"want create custom AI powered chat allow us build blockr pipelines. leverage shinychat define server UI logic follows: nutshell, chat module uses shinychat create chat interface OpenAI’s gpt-4o model. server logic listens messages updates parent$scoutbar add block based response OpenAI. context provided model guide responses, specifically blockr build pipelines. Providing better context isn’t purpose vignette imagine asking model handle specific block parameters can instance start dataset block palmerpenguins data (instead datasets package). create new module: context menu entry won’t much. run app right click network panel, ’ll see “Open AI chat” entry. refine .","code":"chat_ui <- function(id, board, ...) {     id <- NS(id, \"chat\")     card(       card_header(\"blockr.ui assistant\"),       shinychat::chat_mod_ui(         id = NS(id, \"openai\"),         messages = list(           \"Hi! I'll help you to build blockr.ui pipeline with OpenAI's `gpt-4o`.\"         )       )     ) }  chat_srv <- function(board, update, session, parent, ...) {     moduleServer(       \"chat\",       function(input, output, session) {         openai <- ellmer::chat_openai(           system_prompt = \"You are a helpful assistant for developers who want to work with blockr but do not           not very well data analysis. Packages are available at: https://github.com/BristolMyersSquibb/blockr.core,           https://github.com/BristolMyersSquibb/blockr.dplyr, https://github.com/BristolMyersSquibb/blockr.io, These packages provide           blocks such that people can import data with new_dataset_block, transform them with new_select_block and do other things.           We also have blockr.ai that basically exposes llm blocks such as new_llm_transform_block and new_llm_plot_block. They           are convenient to accomplish tasks for which no block exists yet ... A blockr.ui application allows people to build blockr pipeline           step by step by adding block one after each other.            When you are given an order, you will only return the corresponding block            constructor to the user without the `new`. You will return 'Adding a *_block', '*' being the           type of the block.            For instance 'Add me a block to select columns from a dataset' would return            'Adding a select_block' and not new_select_block. If you are asked a question like 'How to load data?'            You will answer to the question with more ellaborated answer from the blockr documentation.           If you are asked 'How to get started?' or similar, you will explain how a blockr pipeline works, from a data block to a plot block.\",           model = \"gpt-4o\",           echo = \"all\"         )         res <- shinychat::chat_mod_server(\"openai\", openai)         observeEvent(res(), {           blk <- regmatches(res()@text, regexpr(\"\\\\w+_block\", res()@text))           if (!length(blk)) {             return(NULL)           }           if (blk %in% names(available_blocks())) {             parent$scoutbar$action <- \"add_block\"             parent$scoutbar$value <- blk           }         })       }     ) } new_chat_module <- function(id = \"chat\", title = \"AI chat\") {   new_board_module(     chat_ui,     chat_srv,     id = id,     title = title,     context_menu = list(       new_context_menu_entry(         name = \"Open AI chat\",         js = \"() => {           console.log('Hello world')         }\",         action = function(input, output, session, board, update, parent) {           # TBD         }       )     ),     class = \"chat_module\"   ) }  serve(   new_dag_board(     modules = list(       dash = new_dashboard_module(),       chat = new_chat_module()     )   ),   \"main\" )"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/articles/blockr.ui.html","id":"blockr-ui-for-users","dir":"Articles","previous_headings":"","what":"blockr.ui for users","title":"Get started with blockr.ui","text":"strived make simple possible, yet totally flexible layout. panels can resized rearranged liking.  ’s blockr.ui looks like. top navigation bar contains buttons import export existing work . left pipeline panel toolbar exposes quick actions : adding new block. Removing set selected blocks. Saving current work. Restore previous state. Zoom network. … center panel displayed current blockr pipeline blocks represented nodes connections edges. example, 1 invalid block state depicted orange. reason explained bottom right corner UI error messages displayed (specific case, block missing input data). Blocks can grouped together within stacks, shown grey circle. convenient stacks can collapsed expanded, thereby saving significant amount space UI. can also drag drop nodes stack add/remove , respectively. Pretty much elements canvas right click action, also known context menu. example, right-clicking node show options remove , add another node right , connect another node add/remove right side dashboard. Right clicking canvas show options add new block add new stack. actions can customised explained following vignette. bottom right corner hosts properties panels. displays properties existing block. can closed reappear click corresponding node graph. can edit properties directly UI, like changing currently selected data. future releases, able change block name . may control global options top right corner. opens menu options can changed, current theme, dashboard zoom, … right side dashboard place add blocks outputs plots, tables output can produced block. can add blocks dashboard right-clicking selecting “Add dashboard” remove right-clicking dashboard output selecting “Remove dashboard”. dashboard can resized panel can dragged rearrange layout. bottom left corner displays current pipeline error logs.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/articles/blockr.ui.html","id":"the-user-interface","dir":"Articles","previous_headings":"","what":"The user interface","title":"Get started with blockr.ui","text":"’s blockr.ui looks like. top navigation bar contains buttons import export existing work . left pipeline panel toolbar exposes quick actions : adding new block. Removing set selected blocks. Saving current work. Restore previous state. Zoom network. … center panel displayed current blockr pipeline blocks represented nodes connections edges. example, 1 invalid block state depicted orange. reason explained bottom right corner UI error messages displayed (specific case, block missing input data). Blocks can grouped together within stacks, shown grey circle. convenient stacks can collapsed expanded, thereby saving significant amount space UI. can also drag drop nodes stack add/remove , respectively. Pretty much elements canvas right click action, also known context menu. example, right-clicking node show options remove , add another node right , connect another node add/remove right side dashboard. Right clicking canvas show options add new block add new stack. actions can customised explained following vignette. bottom right corner hosts properties panels. displays properties existing block. can closed reappear click corresponding node graph. can edit properties directly UI, like changing currently selected data. future releases, able change block name . may control global options top right corner. opens menu options can changed, current theme, dashboard zoom, … right side dashboard place add blocks outputs plots, tables output can produced block. can add blocks dashboard right-clicking selecting “Add dashboard” remove right-clicking dashboard output selecting “Remove dashboard”. dashboard can resized panel can dragged rearrange layout. bottom left corner displays current pipeline error logs.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/articles/blockr.ui.html","id":"blockr-ui-for-developers","dir":"Articles","previous_headings":"","what":"blockr.ui for developers","title":"Get started with blockr.ui","text":"developer want get better undestanding blockr.ui works, section . ’ll explain run app customize . start app blockr.ui, can use: code can deployed server supports R Shiny, Shiny Server RStudio Connect. may notice load blockr related package make blocks available end user app. can also spin custom app existing blocks, links stacks, like : feature convenient setup demonstrations apps quickly. blockr.ui can customized various ways. following detail common ones. blockr.ui built top blockr.core uses functionalities create Shiny app. root, board object collection blocks, links stacks. board created using blockr.core::new_board().     blockr.ui, designed custom board, namely dag_board object via new_dag_board(). allows us create custom UI board_ui.dag_board totally different flavor blockr.core version. summary UI components: server side, board_server.dag_board function handles server logic board: function works board object well elements. callbacks functions Shiny modules injected namespace board server. Unlike callbacks, plugins submodules board, namespace prefixed board namespace. Plugins modules detailed . Finally, parent argument used pass app state object used store current state app communicate modules plugins. specific state method dag_board class (see create_app_state()) design state object, however require also modify plugins modules ensure consistency.     hoods, run_demo_app() serves dag_board object created via new_dag_board(): use ... pass blocks, links stacks board. modules argument used attach one several modules board. case, use new_dashboard_module() attach default dashboard module. dedicated entire article explain create custom modules. discussed blockr.core plugins vignette, plugins Shiny modules used customize/enhance UX aspects board module. control plugin use app, can use blockr.core::plugins(), like : blockr.ui improves core modules gen_add_rm_link_server() add_rm_link_ui() responsible managing node edges connections g6R package. Blocks management done via add_rm_block_server() add_rm_block_ui() modules, powered scoutbaR package. latter provides significantly better user experience powerful search bar autocompletion history management. can pass extra plugin developed long belong one handled block.core. full list available plugins can found running board_plugins(). ’ll notice blockr.ui yet use edit_block edit_block plugins.","code":"library(blockr.dplyr) library(blockr.sdtm) library(blockr.ai) library(blockr.io) library(blockr.ui)  # To customize Sys.setenv(   \"SNAPSHOT_LOCATION\" = \"<PATH_TO_SNAPSHOT_LOCATION>\",   \"AUTO_SNAPSHOT\" = FALSE ) run_demo_app() library(blockr.ui)  run_demo_app(   blocks = c(     a = new_dataset_block(\"BOD\"),     b = new_dataset_block(\"ChickWeight\"),     c = new_merge_block(\"Time\")   ),   links = c(     ac = new_link(\"a\", \"c\", \"x\"),     bc = new_link(\"b\", \"c\", \"y\")   ),   stacks = list(ac = c(\"a\", \"c\")) ) flowchart TD   subgraph board[Board]     subgraph stack1[Stack 1]       direction TB       blk_1[Block 1]       blk_2[Block 2]       blk_1 --> |link| blk_2     end   end tagList(   off_canvas(     id = paste0(id, \"-offcanvas\"),     title = \"Board\",     blocks   ),   board_header(id, my_board_ui),   dockViewOutput(     paste0(id, \"-layout\"),     width = \"100%\",     height = \"100vh\"   ),   scoutbar(     sprintf(\"%s-scoutbar\", id),     placeholder = \"What do you want to do?\",     showRecentSearch = TRUE   ) ) board_server(   \"board\",   board,   plugins = plugins,   callbacks = c(     lapply(modules, board_module_server),     list(       # Callback to signal other modules that the restore is done.       # This allows to restore each part in the correct order.       on_board_restore = board_restore,       manage_scoutbar = manage_scoutbar,       layout = build_layout(modules, plugins)     )   ),   parent = app_state ) flowchart TD   modules[Modules]   board_obj[Board object]   modules --> board_obj   board_obj --> |serve.dag_board| app    subgraph app[App]     plugins[Plugins]     plugins --> main      subgraph main[Main module]       app_state[App state]        subgraph board[Board module]         direction LR          subgraph board_callbacks[Board callbacks]           direction TB           board_restore[Restore]           manage_scoutbar[Scoutbar management]           layout[Layout management]         end          subgraph board_modules[Board modules]           subgraph dashboard_module[Dashboard module]           end         end          subgraph board_plugins[Board plugins]           direction LR           manage_blocks[Manage blocks plugin]           manage_links[Manage links plugin]           manage_stacks[Manage stacks plugin]           generate_code[Generate code plugin]           notify_user[Notify user plugin]         end        end        board_modules <-.-> |update| app_state       board_callbacks <-.-> |update| app_state       board_plugins <-.-> |update| app_state      end   end my_board <- new_dag_board(   blocks = c(     a = new_dataset_block(\"BOD\"),     b = new_dataset_block(\"ChickWeight\"),     c = new_merge_block(\"Time\")   ),   links = c(     ac = new_link(\"a\", \"c\", \"x\"),     bc = new_link(\"b\", \"c\", \"y\")   ),   stacks = list(ac = c(\"a\", \"c\")),   modules = list(     new_dashboard_module()   ) )  my_board #> <dag_board<board>> #>  #> Blocks[3]: #>  #> a<dataset_block<data_block<block>>> #> Name: \"Dataset block\" #> No data inputs #> Initial block state: #>  $ dataset: chr \"BOD\" #>  $ package: chr \"datasets\" #> Constructor: blockr.core::new_dataset_block() #>  #> b<dataset_block<data_block<block>>> #> Name: \"Dataset block\" #> No data inputs #> Initial block state: #>  $ dataset: chr \"ChickWeight\" #>  $ package: chr \"datasets\" #> Constructor: blockr.core::new_dataset_block() #>  #> c<merge_block<transform_block<block>>> #> Name: \"Merge block\" #> Data inputs: \"x\" and \"y\" #> Initial block state: #>  $ by   : chr \"Time\" #>  $ all_x: logi FALSE #>  $ all_y: logi FALSE #> Constructor: blockr.core::new_merge_block() #>  #> Links[2]: #>  #> ac: a -> c (x) #> bc: b -> c (y) #>  #> Stacks[1]: #>  #> ac<stack[2]> #> Name: \"Stack 1\" #> Blocks: \"a\" and \"c\" #>  #> Options: #>  $ board_name    : chr \"Board\" #>  $ n_rows        : int 50 #>  $ page_size     : int 5 #>  $ filter_rows   : logi FALSE #>  $ dark_mode     : chr \"light\" #>  $ thematic      : NULL #>  $ stacks_colors : chr [1:40] \"#A71B4B\" \"#B32A49\" \"#BF3645\" \"#CA433E\" ... #>  $ dashboard_zoom: num 1 #>  $ snapshot      :List of 2 #>   ..$ location: chr \"/tmp/Rtmp1wUcpF\" #>   ..$ auto    : logi FALSE my_plugins <- plugins(   preserve_board(server = ser_deser_server, ui = ser_deser_ui),   manage_blocks(server = add_rm_block_server, ui = add_rm_block_ui),   manage_links(     server = gen_add_rm_link_server(ctx_menu_items),     ui = add_rm_link_ui   ),   manage_stacks(server = add_rm_stack_server, ui = add_rm_stack_ui),   generate_code(server = generate_code_server, ui = generate_code_ui),   notify_user() ) my_plugins #> <plugins[6]> #> preserve_board: <preserve_board<plugin>> #> manage_blocks: <manage_blocks<plugin>> #> manage_links: <manage_links<plugin>> #> manage_stacks: <manage_stacks<plugin>> #> generate_code: <generate_code<plugin>> #> notify_user: <notify_user<plugin>>"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/articles/blockr.ui.html","id":"run-an-application","dir":"Articles","previous_headings":"","what":"Run an application","title":"Get started with blockr.ui","text":"start app blockr.ui, can use: code can deployed server supports R Shiny, Shiny Server RStudio Connect. may notice load blockr related package make blocks available end user app. can also spin custom app existing blocks, links stacks, like : feature convenient setup demonstrations apps quickly.","code":"library(blockr.dplyr) library(blockr.sdtm) library(blockr.ai) library(blockr.io) library(blockr.ui)  # To customize Sys.setenv(   \"SNAPSHOT_LOCATION\" = \"<PATH_TO_SNAPSHOT_LOCATION>\",   \"AUTO_SNAPSHOT\" = FALSE ) run_demo_app() library(blockr.ui)  run_demo_app(   blocks = c(     a = new_dataset_block(\"BOD\"),     b = new_dataset_block(\"ChickWeight\"),     c = new_merge_block(\"Time\")   ),   links = c(     ac = new_link(\"a\", \"c\", \"x\"),     bc = new_link(\"b\", \"c\", \"y\")   ),   stacks = list(ac = c(\"a\", \"c\")) )"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/articles/blockr.ui.html","id":"customizing-the-app","dir":"Articles","previous_headings":"","what":"Customizing the app","title":"Get started with blockr.ui","text":"blockr.ui can customized various ways. following detail common ones. blockr.ui built top blockr.core uses functionalities create Shiny app. root, board object collection blocks, links stacks. board created using blockr.core::new_board().     blockr.ui, designed custom board, namely dag_board object via new_dag_board(). allows us create custom UI board_ui.dag_board totally different flavor blockr.core version. summary UI components: server side, board_server.dag_board function handles server logic board: function works board object well elements. callbacks functions Shiny modules injected namespace board server. Unlike callbacks, plugins submodules board, namespace prefixed board namespace. Plugins modules detailed . Finally, parent argument used pass app state object used store current state app communicate modules plugins. specific state method dag_board class (see create_app_state()) design state object, however require also modify plugins modules ensure consistency.     hoods, run_demo_app() serves dag_board object created via new_dag_board(): use ... pass blocks, links stacks board. modules argument used attach one several modules board. case, use new_dashboard_module() attach default dashboard module. dedicated entire article explain create custom modules. discussed blockr.core plugins vignette, plugins Shiny modules used customize/enhance UX aspects board module. control plugin use app, can use blockr.core::plugins(), like : blockr.ui improves core modules gen_add_rm_link_server() add_rm_link_ui() responsible managing node edges connections g6R package. Blocks management done via add_rm_block_server() add_rm_block_ui() modules, powered scoutbaR package. latter provides significantly better user experience powerful search bar autocompletion history management. can pass extra plugin developed long belong one handled block.core. full list available plugins can found running board_plugins(). ’ll notice blockr.ui yet use edit_block edit_block plugins.","code":"flowchart TD   subgraph board[Board]     subgraph stack1[Stack 1]       direction TB       blk_1[Block 1]       blk_2[Block 2]       blk_1 --> |link| blk_2     end   end tagList(   off_canvas(     id = paste0(id, \"-offcanvas\"),     title = \"Board\",     blocks   ),   board_header(id, my_board_ui),   dockViewOutput(     paste0(id, \"-layout\"),     width = \"100%\",     height = \"100vh\"   ),   scoutbar(     sprintf(\"%s-scoutbar\", id),     placeholder = \"What do you want to do?\",     showRecentSearch = TRUE   ) ) board_server(   \"board\",   board,   plugins = plugins,   callbacks = c(     lapply(modules, board_module_server),     list(       # Callback to signal other modules that the restore is done.       # This allows to restore each part in the correct order.       on_board_restore = board_restore,       manage_scoutbar = manage_scoutbar,       layout = build_layout(modules, plugins)     )   ),   parent = app_state ) flowchart TD   modules[Modules]   board_obj[Board object]   modules --> board_obj   board_obj --> |serve.dag_board| app    subgraph app[App]     plugins[Plugins]     plugins --> main      subgraph main[Main module]       app_state[App state]        subgraph board[Board module]         direction LR          subgraph board_callbacks[Board callbacks]           direction TB           board_restore[Restore]           manage_scoutbar[Scoutbar management]           layout[Layout management]         end          subgraph board_modules[Board modules]           subgraph dashboard_module[Dashboard module]           end         end          subgraph board_plugins[Board plugins]           direction LR           manage_blocks[Manage blocks plugin]           manage_links[Manage links plugin]           manage_stacks[Manage stacks plugin]           generate_code[Generate code plugin]           notify_user[Notify user plugin]         end        end        board_modules <-.-> |update| app_state       board_callbacks <-.-> |update| app_state       board_plugins <-.-> |update| app_state      end   end my_board <- new_dag_board(   blocks = c(     a = new_dataset_block(\"BOD\"),     b = new_dataset_block(\"ChickWeight\"),     c = new_merge_block(\"Time\")   ),   links = c(     ac = new_link(\"a\", \"c\", \"x\"),     bc = new_link(\"b\", \"c\", \"y\")   ),   stacks = list(ac = c(\"a\", \"c\")),   modules = list(     new_dashboard_module()   ) )  my_board #> <dag_board<board>> #>  #> Blocks[3]: #>  #> a<dataset_block<data_block<block>>> #> Name: \"Dataset block\" #> No data inputs #> Initial block state: #>  $ dataset: chr \"BOD\" #>  $ package: chr \"datasets\" #> Constructor: blockr.core::new_dataset_block() #>  #> b<dataset_block<data_block<block>>> #> Name: \"Dataset block\" #> No data inputs #> Initial block state: #>  $ dataset: chr \"ChickWeight\" #>  $ package: chr \"datasets\" #> Constructor: blockr.core::new_dataset_block() #>  #> c<merge_block<transform_block<block>>> #> Name: \"Merge block\" #> Data inputs: \"x\" and \"y\" #> Initial block state: #>  $ by   : chr \"Time\" #>  $ all_x: logi FALSE #>  $ all_y: logi FALSE #> Constructor: blockr.core::new_merge_block() #>  #> Links[2]: #>  #> ac: a -> c (x) #> bc: b -> c (y) #>  #> Stacks[1]: #>  #> ac<stack[2]> #> Name: \"Stack 1\" #> Blocks: \"a\" and \"c\" #>  #> Options: #>  $ board_name    : chr \"Board\" #>  $ n_rows        : int 50 #>  $ page_size     : int 5 #>  $ filter_rows   : logi FALSE #>  $ dark_mode     : chr \"light\" #>  $ thematic      : NULL #>  $ stacks_colors : chr [1:40] \"#A71B4B\" \"#B32A49\" \"#BF3645\" \"#CA433E\" ... #>  $ dashboard_zoom: num 1 #>  $ snapshot      :List of 2 #>   ..$ location: chr \"/tmp/Rtmp1wUcpF\" #>   ..$ auto    : logi FALSE my_plugins <- plugins(   preserve_board(server = ser_deser_server, ui = ser_deser_ui),   manage_blocks(server = add_rm_block_server, ui = add_rm_block_ui),   manage_links(     server = gen_add_rm_link_server(ctx_menu_items),     ui = add_rm_link_ui   ),   manage_stacks(server = add_rm_stack_server, ui = add_rm_stack_ui),   generate_code(server = generate_code_server, ui = generate_code_ui),   notify_user() ) my_plugins #> <plugins[6]> #> preserve_board: <preserve_board<plugin>> #> manage_blocks: <manage_blocks<plugin>> #> manage_links: <manage_links<plugin>> #> manage_stacks: <manage_stacks<plugin>> #> generate_code: <generate_code<plugin>> #> notify_user: <notify_user<plugin>>"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/articles/blockr.ui.html","id":"anatomy-of-blockr-ui","dir":"Articles","previous_headings":"","what":"Anatomy of blockr.ui","title":"Get started with blockr.ui","text":"blockr.ui built top blockr.core uses functionalities create Shiny app. root, board object collection blocks, links stacks. board created using blockr.core::new_board().     blockr.ui, designed custom board, namely dag_board object via new_dag_board(). allows us create custom UI board_ui.dag_board totally different flavor blockr.core version. summary UI components: server side, board_server.dag_board function handles server logic board: function works board object well elements. callbacks functions Shiny modules injected namespace board server. Unlike callbacks, plugins submodules board, namespace prefixed board namespace. Plugins modules detailed . Finally, parent argument used pass app state object used store current state app communicate modules plugins. specific state method dag_board class (see create_app_state()) design state object, however require also modify plugins modules ensure consistency.","code":"flowchart TD   subgraph board[Board]     subgraph stack1[Stack 1]       direction TB       blk_1[Block 1]       blk_2[Block 2]       blk_1 --> |link| blk_2     end   end tagList(   off_canvas(     id = paste0(id, \"-offcanvas\"),     title = \"Board\",     blocks   ),   board_header(id, my_board_ui),   dockViewOutput(     paste0(id, \"-layout\"),     width = \"100%\",     height = \"100vh\"   ),   scoutbar(     sprintf(\"%s-scoutbar\", id),     placeholder = \"What do you want to do?\",     showRecentSearch = TRUE   ) ) board_server(   \"board\",   board,   plugins = plugins,   callbacks = c(     lapply(modules, board_module_server),     list(       # Callback to signal other modules that the restore is done.       # This allows to restore each part in the correct order.       on_board_restore = board_restore,       manage_scoutbar = manage_scoutbar,       layout = build_layout(modules, plugins)     )   ),   parent = app_state ) flowchart TD   modules[Modules]   board_obj[Board object]   modules --> board_obj   board_obj --> |serve.dag_board| app    subgraph app[App]     plugins[Plugins]     plugins --> main      subgraph main[Main module]       app_state[App state]        subgraph board[Board module]         direction LR          subgraph board_callbacks[Board callbacks]           direction TB           board_restore[Restore]           manage_scoutbar[Scoutbar management]           layout[Layout management]         end          subgraph board_modules[Board modules]           subgraph dashboard_module[Dashboard module]           end         end          subgraph board_plugins[Board plugins]           direction LR           manage_blocks[Manage blocks plugin]           manage_links[Manage links plugin]           manage_stacks[Manage stacks plugin]           generate_code[Generate code plugin]           notify_user[Notify user plugin]         end        end        board_modules <-.-> |update| app_state       board_callbacks <-.-> |update| app_state       board_plugins <-.-> |update| app_state      end   end"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/articles/blockr.ui.html","id":"pass-custom-modules","dir":"Articles","previous_headings":"","what":"Pass custom modules","title":"Get started with blockr.ui","text":"hoods, run_demo_app() serves dag_board object created via new_dag_board(): use ... pass blocks, links stacks board. modules argument used attach one several modules board. case, use new_dashboard_module() attach default dashboard module. dedicated entire article explain create custom modules.","code":"my_board <- new_dag_board(   blocks = c(     a = new_dataset_block(\"BOD\"),     b = new_dataset_block(\"ChickWeight\"),     c = new_merge_block(\"Time\")   ),   links = c(     ac = new_link(\"a\", \"c\", \"x\"),     bc = new_link(\"b\", \"c\", \"y\")   ),   stacks = list(ac = c(\"a\", \"c\")),   modules = list(     new_dashboard_module()   ) )  my_board #> <dag_board<board>> #>  #> Blocks[3]: #>  #> a<dataset_block<data_block<block>>> #> Name: \"Dataset block\" #> No data inputs #> Initial block state: #>  $ dataset: chr \"BOD\" #>  $ package: chr \"datasets\" #> Constructor: blockr.core::new_dataset_block() #>  #> b<dataset_block<data_block<block>>> #> Name: \"Dataset block\" #> No data inputs #> Initial block state: #>  $ dataset: chr \"ChickWeight\" #>  $ package: chr \"datasets\" #> Constructor: blockr.core::new_dataset_block() #>  #> c<merge_block<transform_block<block>>> #> Name: \"Merge block\" #> Data inputs: \"x\" and \"y\" #> Initial block state: #>  $ by   : chr \"Time\" #>  $ all_x: logi FALSE #>  $ all_y: logi FALSE #> Constructor: blockr.core::new_merge_block() #>  #> Links[2]: #>  #> ac: a -> c (x) #> bc: b -> c (y) #>  #> Stacks[1]: #>  #> ac<stack[2]> #> Name: \"Stack 1\" #> Blocks: \"a\" and \"c\" #>  #> Options: #>  $ board_name    : chr \"Board\" #>  $ n_rows        : int 50 #>  $ page_size     : int 5 #>  $ filter_rows   : logi FALSE #>  $ dark_mode     : chr \"light\" #>  $ thematic      : NULL #>  $ stacks_colors : chr [1:40] \"#A71B4B\" \"#B32A49\" \"#BF3645\" \"#CA433E\" ... #>  $ dashboard_zoom: num 1 #>  $ snapshot      :List of 2 #>   ..$ location: chr \"/tmp/Rtmp1wUcpF\" #>   ..$ auto    : logi FALSE"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/articles/blockr.ui.html","id":"manage-plugins","dir":"Articles","previous_headings":"","what":"Manage plugins","title":"Get started with blockr.ui","text":"discussed blockr.core plugins vignette, plugins Shiny modules used customize/enhance UX aspects board module. control plugin use app, can use blockr.core::plugins(), like : blockr.ui improves core modules gen_add_rm_link_server() add_rm_link_ui() responsible managing node edges connections g6R package. Blocks management done via add_rm_block_server() add_rm_block_ui() modules, powered scoutbaR package. latter provides significantly better user experience powerful search bar autocompletion history management. can pass extra plugin developed long belong one handled block.core. full list available plugins can found running board_plugins(). ’ll notice blockr.ui yet use edit_block edit_block plugins.","code":"my_plugins <- plugins(   preserve_board(server = ser_deser_server, ui = ser_deser_ui),   manage_blocks(server = add_rm_block_server, ui = add_rm_block_ui),   manage_links(     server = gen_add_rm_link_server(ctx_menu_items),     ui = add_rm_link_ui   ),   manage_stacks(server = add_rm_stack_server, ui = add_rm_stack_ui),   generate_code(server = generate_code_server, ui = generate_code_ui),   notify_user() ) my_plugins #> <plugins[6]> #> preserve_board: <preserve_board<plugin>> #> manage_blocks: <manage_blocks<plugin>> #> manage_links: <manage_links<plugin>> #> manage_stacks: <manage_stacks<plugin>> #> generate_code: <generate_code<plugin>> #> notify_user: <notify_user<plugin>>"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Granjon. Author, maintainer. Nicolas Bennett. Author. Christoph Sax. Author.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Granjon D, Bennett N, Sax C (2025). blockr.ui: 'shiny' powered user interface 'blockr.core'. R package version 1.0.0, https://github.com/BristolMyersSquibb/blockr.ui/.","code":"@Manual{,   title = {blockr.ui: A 'shiny' powered user interface for 'blockr.core'},   author = {David Granjon and Nicolas Bennett and Christoph Sax},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/BristolMyersSquibb/blockr.ui/}, }"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/index.html","id":"blockrui","dir":"","previous_headings":"","what":"A shiny powered user interface for blockr.core","title":"A shiny powered user interface for blockr.core","text":"goal blockr.ui provide alternative user interface {blockr.core}.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A shiny powered user interface for blockr.core","text":"can install development version blockr.ui GitHub :","code":"pak::pak(\"BristolMyersSquibb/blockr.ui\")"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A shiny powered user interface for blockr.core","text":"run demo app: Note demo runs shinylive. feature may work expected due compatibility issues webR.","code":"library(blockr.ui) library(blockr.dplyr) library(blockr.sdtm) library(blockr.io)  run_demo_app()"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/index.html","id":"app-options","dir":"","previous_headings":"","what":"App options","title":"A shiny powered user interface for blockr.core","text":"options can customize setting environment variables: N_STACKS_COLORS: many colors support stack color pickerInput. Default 40. STACKS_COLOR_PALETTE: color palette type. Default spectral. use hcl.colors setup palette. SNAPSHOT_LOCATION: location save snapshots blocks. Default tempdir(). used save blocks browser’s local storage. AUTO_SNAPSHOT: Whether automatically save blocks browser’s local storage. Default FALSE (stable moment).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"A shiny powered user interface for blockr.core","text":"JS code managed esbuild {charpente}. create new JS file compile entire project:","code":"charpente::create_js(\"file-name\") charpente::build_js()"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_blockr.ui_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"blockr.ui dependencies utils — add_blockr.ui_deps","title":"blockr.ui dependencies utils — add_blockr.ui_deps","text":"function attaches blockr.ui dependencies given tag","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_blockr.ui_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"blockr.ui dependencies utils — add_blockr.ui_deps","text":"","code":"add_blockr.ui_deps(tag)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_blockr.ui_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"blockr.ui dependencies utils — add_blockr.ui_deps","text":"tag Element attach dependencies.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_busy_load_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"busy-load dependencies utils — add_busy_load_deps","title":"busy-load dependencies utils — add_busy_load_deps","text":"function attaches busy-load. dependencies given tag","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_busy_load_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"busy-load dependencies utils — add_busy_load_deps","text":"","code":"add_busy_load_deps(tag)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_busy_load_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"busy-load dependencies utils — add_busy_load_deps","text":"tag Element attach dependencies.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_rm_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Add/remove block module — add_rm_block_server","title":"Add/remove block module — add_rm_block_server","text":"Customizable logic adding/removing blocks board.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_rm_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add/remove block module — add_rm_block_server","text":"","code":"add_rm_block_server(id, board, update, ...)  add_rm_block_ui(id, board)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_rm_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add/remove block module — add_rm_block_server","text":"id Namespace ID. board initial board object update Reactive value object initiate board updates. ... Extra arguments passed parent scope. Useful communicate plugins surface information top level (testing ...).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_rm_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add/remove block module — add_rm_block_server","text":"NULL.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_rm_g6_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Add/remove block stacks module — add_rm_stack_server","title":"Add/remove block stacks module — add_rm_stack_server","text":"Customizable logic adding/removing stacks grouping blocks together board.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_rm_g6_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add/remove block stacks module — add_rm_stack_server","text":"","code":"add_rm_stack_server(id, board, update, ...)  add_rm_stack_ui(id, board)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_rm_g6_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add/remove block stacks module — add_rm_stack_server","text":"id Namespace ID. board initial board object update Reactive value object initiate board updates. ... Extra arguments passed parent scope.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_rm_g6_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add/remove block stacks module — add_rm_stack_server","text":"reactive value evaluates NULL list components add rm, add either NULL stacks object rm either NULL character vector link IDs.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_rm_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Add/remove block links module — gen_add_rm_link_server","title":"Add/remove block links module — gen_add_rm_link_server","text":"Customizable logic adding/removing links blocks board.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_rm_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add/remove block links module — gen_add_rm_link_server","text":"","code":"gen_add_rm_link_server(context_menu)  add_rm_link_ui(id, board)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_rm_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add/remove block links module — gen_add_rm_link_server","text":"context_menu Context menu. id Module ID. board initial board object","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/add_rm_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add/remove block links module — gen_add_rm_link_server","text":"NULL.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/blk_choices.html","id":null,"dir":"Reference","previous_headings":"","what":"Create block choices for scoutbaR widget — blk_choices","title":"Create block choices for scoutbaR widget — blk_choices","text":"Utility populate scoutbar block registry information. Create one page per block category","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/blk_choices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create block choices for scoutbaR widget — blk_choices","text":"","code":"blk_choices()"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/blk_icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create block icon — blk_icon","title":"Create block icon — blk_icon","text":"Blocks categorized. function returns corresponding icon category. may used different places like nodes contextual menu (scoutbar) ...","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/blk_icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create block icon — blk_icon","text":"","code":"blk_icon(category)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/blk_icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create block icon — blk_icon","text":"category Block category. See available_blocks.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/block-panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a block panel — show_block_panel","title":"Show a block panel — show_block_panel","text":"Move block offcanvas-body panel. Move block panel offcanvas-body.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/block-panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a block panel — show_block_panel","text":"","code":"show_block_panel(id, parent, session)  hide_block_panel(id, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/block-panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a block panel — show_block_panel","text":"id Block id show parent Parent reactive values. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/block_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Block custom UI — block_ui.dag_board","title":"Block custom UI — block_ui.dag_board","text":"Block custom UI","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/block_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block custom UI — block_ui.dag_board","text":"","code":"# S3 method for class 'dag_board' block_ui(id, x, block = NULL, ...)  # S3 method for class 'dag_board' insert_block_ui(id, x, blocks = NULL, ...)  # S3 method for class 'dag_board' remove_block_ui(id, x, blocks = NULL, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/block_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block custom UI — block_ui.dag_board","text":"id Block module id. x Board object. block Block generate UI . ... Generic consistency. blocks Blocks insert remove.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/blockr.ui-package.html","id":null,"dir":"Reference","previous_headings":"","what":"blockr.ui: A 'shiny' powered user interface for 'blockr.core' — blockr.ui-package","title":"blockr.ui: A 'shiny' powered user interface for 'blockr.core' — blockr.ui-package","text":"Provides web-based point click interface creating data pipelines visualizations 'blockr.core'.","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/blockr.ui-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"blockr.ui: A 'shiny' powered user interface for 'blockr.core' — blockr.ui-package","text":"Maintainer: David Granjon david@cynkra.com Authors: Nicolas Bennett nicolas@cynkra.com Christoph Sax christoph@cynkra.com","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/blockr_ser.html","id":null,"dir":"Reference","previous_headings":"","what":"Ser/deser board — blockr_ser.dag_board","title":"Ser/deser board — blockr_ser.dag_board","text":"Ser/deser board","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/blockr_ser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ser/deser board — blockr_ser.dag_board","text":"","code":"# S3 method for class 'dag_board' blockr_ser(   x,   blocks = NULL,   network = NULL,   grid = NULL,   selected = NULL,   mode = NULL,   options = NULL,   ... )  # S3 method for class 'dock' blockr_ser(x, ...)  # S3 method for class 'network' blockr_ser(x, ...)  # S3 method for class 'data.frame' blockr_ser(x, ...)  # S3 method for class 'dag_board' blockr_deser(x, data, ...)  # S3 method for class 'dock' blockr_deser(x, data, ...)  # S3 method for class 'network' blockr_deser(x, data, ...)  # S3 method for class 'data.frame' blockr_deser(x, data, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/blockr_ser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ser/deser board — blockr_ser.dag_board","text":"x Board. blocks Board blocks. network visNetwork data. grid gridstack data. selected Selected node. mode App mode. options Board options. ... Generic consistency. data Data restore.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/board-layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Board header — board_header","title":"Board header — board_header","text":"Header layout.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/board-layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Board header — board_header","text":"","code":"board_header(id, board_ui)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/board-layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Board header — board_header","text":"id Board id. board_ui Board ui.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/board-module.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a board module — new_board_module","title":"Create a board module — new_board_module","text":"Extend DAG board adding modules.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/board-module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a board module — new_board_module","text":"","code":"new_board_module(   ui,   server,   id,   title,   context_menu = list(),   position = NULL,   class = character() )  new_dashboard_module(id = \"dashboard\", title = \"Dashboard\")"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/board-module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a board module — new_board_module","text":"ui, server UI server functions id, title Module ID title context_menu List context menu entries position Panel position class (Optional) additional class(es)","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/board_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom board UI — board_ui.board_options","title":"Custom board UI — board_ui.board_options","text":"Custom board UI","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/board_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom board UI — board_ui.board_options","text":"","code":"# S3 method for class 'board_options' board_ui(id, x, ...)  # S3 method for class 'board_options' update_ui(x, session, ...)  # S3 method for class 'dag_board' board_ui(id, x, plugins = list(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/board_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom board UI — board_ui.board_options","text":"id Namespace ID. x Board. ... Generic consistency. session Shiny session object. plugins UI board plugins.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/can_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether the node can receive connection — can_connect","title":"Check whether the node can receive connection — can_connect","text":"Check whether node can receive connection","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/can_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether the node can receive connection — can_connect","text":"","code":"can_connect(x, target, rv)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/can_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether the node can receive connection — can_connect","text":"x Block object. target Connection target id. rv Board reactive values","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/check_connections.html","id":null,"dir":"Reference","previous_headings":"","what":"Check node connection — check_connections","title":"Check node connection — check_connections","text":"Check node connection","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/check_connections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check node connection — check_connections","text":"","code":"check_connections(x, target, rv)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/check_connections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check node connection — check_connections","text":"x block. target Connection target id. rv Board reactive values.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/cleanup_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a node and associated edges — cleanup_node","title":"Remove a node and associated edges — cleanup_node","text":"Combine remove_node remove_edge.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/cleanup_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a node and associated edges — cleanup_node","text":"","code":"cleanup_node(selected, vals, rv, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/cleanup_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a node and associated edges — cleanup_node","text":"selected UID (character string) node remove. vals Reactive values dataframe representing nodes data. rv Board reactive values. Read-. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/cold-start.html","id":null,"dir":"Reference","previous_headings":"","what":"Create network data from board — create_edges_data_from_links","title":"Create network data from board — create_edges_data_from_links","text":"different restore_network, latter restore network JSON compatible structure. need re-create JSON board blocks, links stacks.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/cold-start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create network data from board — create_edges_data_from_links","text":"","code":"create_edges_data_from_links(links)  create_nodes_data_from_blocks(blocks, stacks)  create_combos_data_from_stacks(stacks, parent, colors)  cold_start(rv, parent, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/cold-start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create network data from board — create_edges_data_from_links","text":"links Board links. blocks Board blocks. stacks Board stacks. parent Global app reactive values. colors Stacks colors. Internal. rv Board reactive values. Read-session Shiny session","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/context-menu.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a context menu entry — new_context_menu_entry","title":"Create a context menu entry — new_context_menu_entry","text":"Adds new entry context menu board.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/context-menu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a context menu entry — new_context_menu_entry","text":"","code":"new_context_menu_entry(   name,   js,   action = NULL,   condition = TRUE,   id = tolower(gsub(\" +\", \"_\", name)) )"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/context-menu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a context menu entry — new_context_menu_entry","text":"name Name context menu entry. js JavaScript code execute entry selected. action Action perform entry selected. condition Condition determine entry shown. id Unique identifier context menu entry. Infered name provided.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/create_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an edge and add it to the network — create_edge","title":"Create an edge and add it to the network — create_edge","text":"validation layer prior knowing whether can add edge. rv updated graph proxy also updated.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/create_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an edge and add it to the network — create_edge","text":"","code":"create_edge(new, vals, rv, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/create_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an edge and add it to the network — create_edge","text":"new Edge data. list like list(source = \"from_node_ID\", target = \"to_node_ID\"). vals Global reactive values. Read-write. rv Board reactive values. Read-. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/create_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new node it to the network — create_node","title":"Create a new node it to the network — create_node","text":"rv updated graph proxy also updated. handle either adding new node append new node existing one. later case, involves edge creation (connection). validation required practice node can theoretically feed many children nodes required.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/create_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new node it to the network — create_node","text":"","code":"create_node(new, vals, rv, validate = TRUE, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/create_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new node it to the network — create_node","text":"new New block add. block object. vals Global reactive values. communicate modules. rv Board reactive values. Read-. validate Whether register validation observers node. Default TRUE. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/dashboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Dashboard Ui generic — dashboard_ui","title":"Dashboard Ui generic — dashboard_ui","text":"Dashboard Ui generic Dashboard grid server Dashboard dock UI method Dashboard dock server method","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/dashboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dashboard Ui generic — dashboard_ui","text":"","code":"dashboard_ui(id, board, ...)  dashboard_server(board, update, session, parent, ...)  # S3 method for class 'dag_board' dashboard_ui(id, board, ...)  # S3 method for class 'dag_board' dashboard_server(board, update, session, parent, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/dashboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dashboard Ui generic — dashboard_ui","text":"id Module id. board Board reactiveValues. Read-. ... Extra parameters. update Update reactiveVal signal change board. session Shiny session. parent Parent global reactiveValues.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/default-g6.html","id":null,"dir":"Reference","previous_headings":"","what":"Default g6 network options — default_g6_options","title":"Default g6 network options — default_g6_options","text":"Default g6 network options","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/default-g6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default g6 network options — default_g6_options","text":"","code":"default_g6_options(graph, ...)  default_g6_behaviors(graph, ..., ns)  default_g6_plugins(graph, ..., ns, path, context_menu)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/default-g6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default g6 network options — default_g6_options","text":"graph g6 network instance. ... Extra option parameters. ns Module namespace.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/define_conlabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Define connection label — define_conlabel","title":"Define connection label — define_conlabel","text":"Define connection label","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/define_conlabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define connection label — define_conlabel","text":"","code":"define_conlabel(x, target, rv)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/define_conlabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define connection label — define_conlabel","text":"x Block object. target Connection target id. rv Board reactive values","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/dropdown_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Bootstrap dropdown — dropdown_button","title":"Create a Bootstrap dropdown — dropdown_button","text":"Creates dropdown menu.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/dropdown_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Bootstrap dropdown — dropdown_button","text":"","code":"dropdown_button(..., icon)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/dropdown_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Bootstrap dropdown — dropdown_button","text":"... Content. icon Icon.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/dropdown_button.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Bootstrap dropdown — dropdown_button","text":"HTML tag object representing dropdown element.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/gen_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Code generation module — generate_code_ui","title":"Code generation module — generate_code_ui","text":"Generate reproducible code board.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/gen_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code generation module — generate_code_ui","text":"","code":"generate_code_ui(id, board)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/gen_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code generation module — generate_code_ui","text":"id Module id. board initial board object","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/generate_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Code generation plugin module — generate_code_server","title":"Code generation plugin module — generate_code_server","text":"code necessary reproducing data analysis set blockr can made available user. Several ways providing script code snippet conceivable currently implemented, modal copy--clipboard functionality. readily extensible, example offering download button, providing functionality generate_code module.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/generate_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code generation plugin module — generate_code_server","text":"","code":"generate_code_server(id, board, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/generate_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Code generation plugin module — generate_code_server","text":"id Namespace ID board Reactive values object ... Extra arguments passed parent scope","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/generate_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code generation plugin module — generate_code_server","text":"plugin container inheriting generate_code returned generate_code(), UI component (e.g. generate_code_ui()) expected return shiny UI (.e. shiny::tagList()) server component (.e. generate_code_server()) expected return NULL.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/get_block_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get block info in registry — get_block_metadata","title":"Get block info in registry — get_block_metadata","text":"Get block info registry","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/get_block_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get block info in registry — get_block_metadata","text":"","code":"get_block_metadata(x)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/get_block_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get block info in registry — get_block_metadata","text":"x Block object","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/get_blocks_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the state of a block — get_blocks_state","title":"Get the state of a block — get_blocks_state","text":"Get state block","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/get_blocks_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the state of a block — get_blocks_state","text":"","code":"get_blocks_state(rv)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/get_blocks_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the state of a block — get_blocks_state","text":"rv Board reactiveValues read-usage.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/handle_dashboard_zoom.html","id":null,"dir":"Reference","previous_headings":"","what":"Update dashboard zoom on the client — handle_dashboard_zoom","title":"Update dashboard zoom on the client — handle_dashboard_zoom","text":"allows set different zoom level handle crowded dashboards.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/handle_dashboard_zoom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update dashboard zoom on the client — handle_dashboard_zoom","text":"","code":"handle_dashboard_zoom(session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/handle_dashboard_zoom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update dashboard zoom on the client — handle_dashboard_zoom","text":"session Shiny session object","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/handlers-utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Board restoration callback — board_restore","title":"Board restoration callback — board_restore","text":"Board restoration callback App layout Scoutbar management callback","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/handlers-utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Board restoration callback — board_restore","text":"","code":"board_restore(board, update, session, parent, ...)  build_layout(modules, plugins)  manage_scoutbar(board, update, session, parent, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/initialize_g6.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a G6 ANTV Network Visualization — initialize_g6","title":"Initialize a G6 ANTV Network Visualization — initialize_g6","text":"Creates G6 ANTV network visualization pre-configured options nodes, edges, layout, behaviors, plugins.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/initialize_g6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a G6 ANTV Network Visualization — initialize_g6","text":"","code":"initialize_g6(nodes = NULL, edges = NULL, ns, path, context_menu)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/initialize_g6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a G6 ANTV Network Visualization — initialize_g6","text":"nodes data frame list containing node information. node typically least id field, optionally attributes like label. Default NULL. edges data frame list containing edge information. edge typically needs source target fields define connections. Default NULL. ns Session namespace.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/initialize_g6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a G6 ANTV Network Visualization — initialize_g6","text":"G6 network visualization object can customized directly rendered R Markdown, Shiny, R environments.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/initialize_g6.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a G6 ANTV Network Visualization — initialize_g6","text":"function initializes G6 network visualization several pre-configured features: Node styling background labels Combo (group) support circular styling Curved edge paths directional arrows dashed styling Dagre layout algorithm optimized directed graphs Interactive behaviors including zoom, drag, selection, edge creation Plugins minimap, tooltips, fullscreen mode, context menu, toolbar","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/list_empty_connections.html","id":null,"dir":"Reference","previous_headings":"","what":"List node connections — list_empty_connections","title":"List node connections — list_empty_connections","text":"List node connections","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/list_empty_connections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List node connections — list_empty_connections","text":"","code":"list_empty_connections(x, target, rv)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/list_empty_connections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List node connections — list_empty_connections","text":"x block. target Connection target id. rv Board reactive values.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/main.html","id":null,"dir":"Reference","previous_headings":"","what":"Main ui for blockr2 — main_ui","title":"Main ui for blockr2 — main_ui","text":"board composed 2 views pointing network module grid/dashboard module. Server module board.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/main.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main ui for blockr2 — main_ui","text":"","code":"main_ui(id, board, plugins)  create_app_state(board)  # S3 method for class 'dag_board' create_app_state(board)  main_server(id, board, plugins, modules)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/main.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main ui for blockr2 — main_ui","text":"id Unique id. board Board object. plugins List plugins use. See plugins. modules modules pass.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/node-validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Register block validation observer — register_node_validation","title":"Register block validation observer — register_node_validation","text":"block register observer captures messages related block validation status. Block validation made backend function updates node color based valid status.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/node-validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register block validation observer — register_node_validation","text":"","code":"register_node_validation(id, rv, vals, session)  apply_validation(id, vals, rv, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/node-validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register block validation observer — register_node_validation","text":"id Block id register validation. rv Board reactive values. Read-. vals Global reactive values. Read-write. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/off_canvas.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Bootstrap Off-Canvas Element — off_canvas","title":"Create a Bootstrap Off-Canvas Element — off_canvas","text":"Creates -canvas element, sliding panel appears edges viewport. wrapper Bootstrap's -canvas component.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/off_canvas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Bootstrap Off-Canvas Element — off_canvas","text":"","code":"off_canvas(   id,   title,   ...,   width = \"w-25\",   position = c(\"start\", \"top\", \"bottom\", \"end\") )"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/off_canvas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Bootstrap Off-Canvas Element — off_canvas","text":"id Character string. ID -canvas element. ID used show/hide element via JavaScript. title Character string. title display header -canvas element. ... Additional UI elements include body -canvas element. width Character string. Bootstrap width class apply -canvas element. Defaults \"w-100\" (100% width). Common values include \"w-75\", \"w-50\", etc. position Character string. position -canvas element appear. Must one \"start\" (left), \"end\" (right), \"top\", \"bottom\". Defaults \"start\".","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/off_canvas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Bootstrap Off-Canvas Element — off_canvas","text":"HTML tag object representing -canvas element.","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/off_canvas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Bootstrap Off-Canvas Element — off_canvas","text":"","code":"if (interactive()) {   library(shiny)   library(bslib)    ui <- page_fillable(     actionButton(      \"toggle\",      \"Toggle offcanvas\",      `data-bs-toggle` = \"offcanvas\",      `data-bs-target` = \"#demo\",      `aria-controls` = \"demo\"     ),     off_canvas(       id = \"demo\",       title = \"Settings\",       position = \"end\",       sliderInput(\"n\", \"Number\", 1, 100, 50)     )   )    server <- function(input, output) {}    shinyApp(ui, server) }"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/process_app_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Useful for shinytest2 Pre-process reactiveValues results — process_app_state","title":"Useful for shinytest2 Pre-process reactiveValues results — process_app_state","text":"Useful shinytest2 Pre-process reactiveValues results","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/process_app_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Useful for shinytest2 Pre-process reactiveValues results — process_app_state","text":"","code":"process_app_state(state)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/register_node_stack_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Register block stack bind/unbind — register_node_stack_link","title":"Register block stack bind/unbind — register_node_stack_link","text":"block register observer captures messages related block validation status.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/register_node_stack_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register block stack bind/unbind — register_node_stack_link","text":"","code":"register_node_stack_link(id, rv, vals, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/register_node_stack_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register block stack bind/unbind — register_node_stack_link","text":"id Block id register validation. rv Board reactive values. Read-. vals Global reactive values. Read-write. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/remove_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove an edge — remove_edge","title":"Remove an edge — remove_edge","text":"Update dataframe visNetwork graph","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/remove_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove an edge — remove_edge","text":"","code":"remove_edge(selected, vals, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/remove_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove an edge — remove_edge","text":"selected UID (character string) edge remove. vals Reactive values containing dataframe representing edges data. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/remove_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a node — remove_node","title":"Remove a node — remove_node","text":"Remove node g6 instance","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/remove_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a node — remove_node","text":"","code":"remove_node(selected, vals, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/remove_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a node — remove_node","text":"selected UID (character string) node remove. vals Global reactive values. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/restore-dashboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore dashboard state from board state — restore_dashboard","title":"Restore dashboard state from board state — restore_dashboard","text":"Restore dashboard state board state Find blocks ids generic Find blocks ids dock method","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/restore-dashboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore dashboard state from board state — restore_dashboard","text":"","code":"restore_dashboard(board, rv, parent, session)  # S3 method for class 'dag_board' restore_dashboard(board, rv, parent, session)  find_blocks_ids(board, parent, session)  # S3 method for class 'dag_board' find_blocks_ids(board, parent, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/restore-dashboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore dashboard state from board state — restore_dashboard","text":"board Board object. rv Board reactive values object. Read-parent Parent reactive values. session Shiny session object. Contains blocks coordinates, dimensions, ...","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/restore_board.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore board from snapshot — restore_board","title":"Restore board from snapshot — restore_board","text":"Restore board snapshot","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/restore_board.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore board from snapshot — restore_board","text":"","code":"restore_board(path, res, parent)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/restore_board.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore board from snapshot — restore_board","text":"path JSON snapshot path. res reactiveVal containing module returned value. parent Parent reactiveValues communicate modules.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/restore_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore network from saved snapshot — restore_network","title":"Restore network from saved snapshot — restore_network","text":"Network updated via proxy.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/restore_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore network from saved snapshot — restore_network","text":"","code":"restore_network(rv, vals, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/restore_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore network from saved snapshot — restore_network","text":"rv Board internal reactive values. Read-vals Global vals reactive values. Read-write access. session Shiny session object","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/restore_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restore network from saved snapshot — restore_network","text":"reactiveValues object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/run_demo_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo app — run_demo_app","title":"Demo app — run_demo_app","text":"Run demo app","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/run_demo_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demo app — run_demo_app","text":"","code":"run_demo_app(...)  new_dag_board(..., modules = new_dashboard_module(), class = character())"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/run_demo_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Demo app — run_demo_app","text":"... Forwarded new_board. modules modules pass. class Additional class(es).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/save-board.html","id":null,"dir":"Reference","previous_headings":"","what":"Create board filename — board_filename","title":"Create board filename — board_filename","text":"Create board filename Save board disk","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/save-board.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create board filename — board_filename","text":"","code":"board_filename(rv)  write_board_to_disk(rv, parent, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/save-board.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create board filename — board_filename","text":"rv Internal reactiveValues read-usage. parent Parent reactiveValues communicate modules. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/ser_deser.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialization module — ser_deser_server","title":"Serialization module — ser_deser_server","text":"Object (de)serialization board server context.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/ser_deser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialization module — ser_deser_server","text":"","code":"ser_deser_server(id, board, ...)  ser_deser_ui(id, board)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/ser_deser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialization module — ser_deser_server","text":"id module ID. board initial board object ... Extra arguments passed parent scope","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/ser_deser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Serialization module — ser_deser_server","text":"reactiveVal object evaluates NULL board obejct.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/show_stack_actions.html","id":null,"dir":"Reference","previous_headings":"","what":"Show stack actions — show_stack_actions","title":"Show stack actions — show_stack_actions","text":"modal window triggered create stack pressed canvas right click","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/show_stack_actions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show stack actions — show_stack_actions","text":"","code":"show_stack_actions(rv, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/show_stack_actions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show stack actions — show_stack_actions","text":"rv Reactive values containing board elements. Read-. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/snapshot_board.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture board snapshot — snapshot_board","title":"Capture board snapshot — snapshot_board","text":"used autosnapshot board.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/snapshot_board.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture board snapshot — snapshot_board","text":"","code":"snapshot_board(vals, rv, parent, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/snapshot_board.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture board snapshot — snapshot_board","text":"vals Local reactiveValues. rv Internal reactiveValues read-usage. parent Parent reactiveValues communicate modules. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/stack-nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamically group nodes — stack_nodes","title":"Dynamically group nodes — stack_nodes","text":"Given set selected nodes, add unique group apply unique color labels. Useful removing stack.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/stack-nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamically group nodes — stack_nodes","text":"","code":"stack_nodes(stack_id = NULL, nodes = NULL, rv, parent, session)  unstack_nodes(parent, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/stack-nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamically group nodes — stack_nodes","text":"stack_id Stack id attach nodes . nodes Vector node ids stack. rv Board reactive values. parent Global scope (entire app) reactive values. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/toggle_undo_redo.html","id":null,"dir":"Reference","previous_headings":"","what":"Toggle undo/redo — toggle_undo_redo","title":"Toggle undo/redo — toggle_undo_redo","text":"Toggle state undo/redo buttons.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/toggle_undo_redo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toggle undo/redo — toggle_undo_redo","text":"","code":"toggle_undo_redo(vals, parent)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/toggle_undo_redo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Toggle undo/redo — toggle_undo_redo","text":"vals Local module reactive Values. parent Global reactive Values.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/validate_edge_creation.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate edge creation for a block — validate_edge_creation","title":"Validate edge creation for a block — validate_edge_creation","text":"Validate edge creation block","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/validate_edge_creation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate edge creation for a block — validate_edge_creation","text":"","code":"validate_edge_creation(target, rv)"},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/reference/validate_edge_creation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate edge creation for a block — validate_edge_creation","text":"target Target block id rv Board reactive values. Read-.","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"blockr.ui 1.0.0","text":"Removed grid modules Drop visNetwork support","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"blockr.ui 1.0.0","text":"New graph engine relying g6R. New dashboard engine relying dockViewR.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/news/index.html","id":"blockrui-050","dir":"Changelog","previous_headings":"","what":"blockr.ui 0.5.0","title":"blockr.ui 0.5.0","text":"New stack management system.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/news/index.html","id":"blockrui-030","dir":"Changelog","previous_headings":"","what":"blockr.ui 0.3.0","title":"blockr.ui 0.3.0","text":"Refactored new blockr.core helpers.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.ui/news/index.html","id":"blockrui-020","dir":"Changelog","previous_headings":"","what":"blockr.ui 0.2.0","title":"blockr.ui 0.2.0","text":"Initial POC stable release (big refactoring). app logic now abstracted blockr.core. Future releases, include block.core elements.","code":""}]
